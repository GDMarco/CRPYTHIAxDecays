/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_THREADS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
#define SWIGPYTHON_BUILTIN

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if !defined(PY_SSIZE_T_CLEAN) && !defined(SWIG_NO_PY_SSIZE_T_CLEAN)
#define PY_SSIZE_T_CLEAN
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus) && __cplusplus >=201703L
#pragma GCC diagnostic ignored "-Wregister" /* For python-2.7 headers that use register */
#endif
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */

#if defined(_MSC_VER) && _MSC_VER >= 1929
/* Workaround compilation errors when redefining _DEBUG in MSVC 2019 version 16.10 and later
 * See https://github.com/swig/swig/issues/2090 */
# include <corecrt.h>
#endif

# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
  return (char *)PyUnicode_AsUTF8(str);
#else
  return PyString_AsString(str);
#endif
}

/* Was useful for Python 3.0.x-3.2.x - now provided only for compatibility
 * with any uses in user interface files. */
#define SWIG_Python_str_DelForPy3(x)


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
# define SWIGPY_USE_CAPSULE
#ifdef SWIGPYTHON_BUILTIN
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule_builtin" SWIG_TYPE_TABLE_NAME
#else
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
#endif
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    if (newvalue) {
      Py_XDECREF(value);
      PyErr_Restore(type, newvalue, traceback);
    } else {
      PyErr_Restore(type, value, traceback);
    }
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      if PY_VERSION_HEX < 0x03070000
#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()
#      else
#        define SWIG_PYTHON_INITIALIZE_THREADS
#      endif
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03030000
# error "This version of SWIG only supports Python 3 >= 3.3"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      if (result) {
        PyList_SET_ITEM(result, 0, o2);
      } else {
        Py_DECREF(obj);
        return o2;
      }
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
 
/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */
 
typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_InternFromString("<Swig global variables>");
#else
  return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
#if PY_VERSION_HEX >= 0x03000000
  PyObject *str = PyUnicode_InternFromString("(");
  PyObject *tail;
  PyObject *joined;
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    tail = PyUnicode_FromString(var->name);
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
    if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
    }
  }
  tail = PyUnicode_InternFromString(")");
  joined = PyUnicode_Concat(str, tail);
  Py_DecRef(str);
  Py_DecRef(tail);
  str = joined;
#else
  PyObject *str = PyString_FromString("(");
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    PyString_ConcatAndDel(&str,PyString_FromString(var->name));
    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
  }
  PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
  return str;
}

SWIGINTERN void
swig_varlink_dealloc(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  swig_globalvar *var = v->vars;
  while (var) {
    swig_globalvar *n = var->next;
    free(var->name);
    free(var);
    var = n;
  }
}

SWIGINTERN PyObject *
swig_varlink_getattr(PyObject *o, char *n) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  PyObject *res = NULL;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->get_attr)();
      break;
    }
    var = var->next;
  }
  if (res == NULL && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN int
swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  int res = 1;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->set_attr)(p);
      break;
    }
    var = var->next;
  }
  if (res == 1 && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN PyTypeObject*
swig_varlink_type(void) {
  static char varlink__doc__[] = "Swig var link object";
  static PyTypeObject varlink_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                  /* ob_size */
#endif
      "swigvarlink",                      /* tp_name */
      sizeof(swig_varlinkobject),         /* tp_basicsize */
      0,                                  /* tp_itemsize */
      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                       /*tp_print*/
#else
      (Py_ssize_t)0,                      /*tp_vectorcall_offset*/
#endif
      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
      0,                                  /* tp_compare */
      (reprfunc) swig_varlink_repr,       /* tp_repr */
      0,                                  /* tp_as_number */
      0,                                  /* tp_as_sequence */
      0,                                  /* tp_as_mapping */
      0,                                  /* tp_hash */
      0,                                  /* tp_call */
      (reprfunc) swig_varlink_str,        /* tp_str */
      0,                                  /* tp_getattro */
      0,                                  /* tp_setattro */
      0,                                  /* tp_as_buffer */
      0,                                  /* tp_flags */
      varlink__doc__,                     /* tp_doc */
      0,                                  /* tp_traverse */
      0,                                  /* tp_clear */
      0,                                  /* tp_richcompare */
      0,                                  /* tp_weaklistoffset */
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
      0,                                  /* tp_del */
      0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                  /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                  /* tp_allocs */
      0,                                  /* tp_frees */
      0,                                  /* tp_maxalloc */
      0,                                  /* tp_prev */
      0                                   /* tp_next */
#endif
    };
    varlink_type = tmp;
    type_init = 1;
    if (PyType_Ready(&varlink_type) < 0)
      return NULL;
  }
  return &varlink_type;
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
  if (result) {
    result->vars = 0;
  }
  return ((PyObject*) result);
}

SWIGINTERN void 
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v = (swig_varlinkobject *) p;
  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  if (gv) {
    size_t size = strlen(name)+1;
    gv->name = (char *)malloc(size);
    if (gv->name) {
      memcpy(gv->name, name, size);
      gv->get_attr = get_attr;
      gv->set_attr = set_attr;
      gv->next = v->vars;
    }
  }
  v->vars = gv;
}


static PyObject *Swig_Globals_global = NULL;
  
SWIGINTERN PyObject *
SWIG_globals(void) {
  if (Swig_Globals_global == NULL) {
    Swig_Globals_global = SWIG_newvarlink();
  }
  return Swig_Globals_global;
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      Py_INCREF(obj);
      data->newargs = obj;
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
        data->newargs = PyTuple_New(1);
        if (data->newargs) {
          Py_INCREF(obj);
          PyTuple_SET_ITEM(data->newargs, 0, obj);
        } else {
          Py_DECREF(data->newraw);
          Py_DECREF(data->klass);
          free(data);
          return 0;
        }
      } else {
        Py_INCREF(obj);
        data->newargs = obj;
      }
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data)
{
  Py_XDECREF(data->klass);
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
  free(data);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_XINCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    PyObject *val = SwigPyObject_long(v);
    if (val) {
      PyObject *ofmt;
      PyTuple_SET_ITEM(args, 0, val);
      ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
        res = PyUnicode_Format(ofmt,args);
#else
        res = PyString_Format(ofmt,args);
#endif
        Py_DECREF(ofmt);
      }
    }
    Py_DECREF(args);
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (repr && v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
    if (nrep) {
# if PY_VERSION_HEX >= 0x03000000
      PyObject *joined = PyUnicode_Concat(repr, nrep);
      Py_DecRef(repr);
      Py_DecRef(nrep);
      repr = joined;
# else
      PyString_ConcatAndDel(&repr,nrep);
# endif
    } else {
      Py_DecRef(repr);
      repr = NULL;
    }
  }
  return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

static PyObject* Swig_Capsule_global = NULL;

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        if (tmp) {
          res = SWIG_Python_CallFunctor(destroy, tmp);
        } else {
          res = 0;
        }
        Py_XDECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
    Py_XDECREF(Swig_Capsule_global);
  }
  Py_XDECREF(next);
#ifdef SWIGPYTHON_BUILTIN
  Py_XDECREF(sobj->dict);
#endif
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  ((SwigPyObject *)next)->next = sobj->next;
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        Py_DECREF(SwigPyObject_acquire(v,args));
      } else {
        Py_DECREF(SwigPyObject_disown(v,args));
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) != 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
    sobj->dict = 0;
#endif
    if (own == SWIG_POINTER_OWN) {
      /* Obtain a reference to the Python capsule wrapping the module information, so that the
       * module information is correctly destroyed after all SWIG python objects have been freed
       * by the GC (and corresponding destructors invoked) */
      Py_XINCREF(Swig_Capsule_global);
    }
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) != 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !sobj->own) {
      res = SWIG_ERROR_RELEASE_NOT_OWNED;
    } else {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
        sobj->own = 0;
      }
      if (flags & SWIG_POINTER_CLEAR) {
        sobj->ptr = 0;
      }
      res = SWIG_OK;
    }
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
        PyObject *dict = *dictptr;
        if (dict == NULL) {
          dict = PyDict_New();
          *dictptr = dict;
        }
        if (dict) {
          PyDict_SetItem(dict, SWIG_This(), swig_this);
        } else{
          Py_DECREF(inst);
          inst = 0;
        }
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            PyType_Modified(Py_TYPE(inst));
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    if (dict) {
      return PyDict_SetItem(dict, SWIG_This(), swig_this);
    } else{
      return -1;
    }
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      if (newobj) {
        newobj->dict = 0;
      }
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

static PyObject *Swig_TypeCache_global = NULL;

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  if (Swig_TypeCache_global == NULL) {
    Swig_TypeCache_global = PyDict_New();
  }
  return Swig_TypeCache_global;
}

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
#ifdef SWIG_LINK_RUNTIME
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
  }
#else
  void *type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
  if (PyErr_Occurred()) {
    PyErr_Clear();
    type_pointer = (void *)0;
  }
#endif
  return (swig_module_info *) type_pointer;
}


static int interpreter_counter = 0; // how many (sub-)interpreters are using swig_module's types

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  if (--interpreter_counter != 0) // another sub-interpreter may still be using the swig_module's types
    return;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      ty->clientdata = 0;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
  Py_DECREF(SWIG_globals());
  Swig_Globals_global = NULL;
  Py_DECREF(SWIG_Python_TypeCache());
  Swig_TypeCache_global = NULL;
  Swig_Capsule_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
      ++interpreter_counter;
      Swig_Capsule_global = pointer;
    } else {
      Py_DECREF(pointer);
    }
  } else {
    Py_XDECREF(pointer);
  }
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      if (obj) {
        PyDict_SetItem(cache, key, obj);
        Py_DECREF(obj);
      }
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) != 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        goto done;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN Py_hash_t
SwigPyObject_hash(PyObject *obj) {
  SwigPyObject *sobj = (SwigPyObject *)obj;
  void *ptr = sobj->ptr;
#if PY_VERSION_HEX < 0x03020000
  return (Py_hash_t)(Py_ssize_t)ptr;
#else
  return (Py_hash_t)ptr;
#endif
}

SWIGINTERN Py_hash_t
SWIG_PyNumber_AsPyHash(PyObject *obj) {
  Py_hash_t result = -1;
#if PY_VERSION_HEX < 0x03020000
  if (PyInt_Check(obj))
    result = PyInt_AsLong(obj);
  else if (PyLong_Check(obj))
    result = PyLong_AsLong(obj);
#else
  if (PyNumber_Check(obj))
    result = PyNumber_AsSsize_t(obj, NULL);
#endif
  else
    PyErr_Format(PyExc_TypeError, "Wrong type for hash function");
  return PyErr_Occurred() ? -1 : result;
}

SWIGINTERN int
SwigPyBuiltin_BadInit(PyObject *self, PyObject *SWIGUNUSEDPARM(args), PyObject *SWIGUNUSEDPARM(kwds)) {
  PyErr_Format(PyExc_TypeError, "Cannot create new instances of type '%.300s'", self->ob_type->tp_name);
  return -1;
}

SWIGINTERN void
SwigPyBuiltin_BadDealloc(PyObject *obj) {
  SwigPyObject *sobj = (SwigPyObject *)obj;
  if (sobj->own) {
    PyErr_Format(PyExc_TypeError, "Swig detected a memory leak in type '%.300s': no callable destructor found.", obj->ob_type->tp_name);
  }
}

typedef struct {
  PyCFunction get;
  PyCFunction set;
} SwigPyGetSet;

SWIGINTERN PyObject *
SwigPyBuiltin_GetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  tuple = PyTuple_New(0);
  assert(tuple);
  result = (*getset->get)(obj, tuple);
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyObject *
SwigPyBuiltin_FunpackGetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  result = (*getset->get)(obj, NULL);
  return result;
}

SWIGINTERN int
SwigPyBuiltin_SetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  tuple = PyTuple_New(1);
  assert(tuple);
  Py_INCREF(val);
  PyTuple_SET_ITEM(tuple, 0, val);
  result = (*getset->set)(obj, tuple);
  Py_DECREF(tuple);
  Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN int
SwigPyBuiltin_FunpackSetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  result = (*getset->set)(obj, val);
  Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN void
SwigPyStaticVar_dealloc(PyDescrObject *descr) {
  PyObject_GC_UnTrack(descr);
  Py_XDECREF(PyDescr_TYPE(descr));
  Py_XDECREF(PyDescr_NAME(descr));
  PyObject_GC_Del(descr);
}

SWIGINTERN PyObject *
SwigPyStaticVar_repr(PyGetSetDescrObject *descr) {
#if PY_VERSION_HEX >= 0x03000000

  return PyUnicode_FromFormat("<class attribute '%S' of type '%s'>", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  return PyString_FromFormat("<class attribute '%s' of type '%s'>", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
}

SWIGINTERN int
SwigPyStaticVar_traverse(PyObject *self, visitproc visit, void *arg) {
  PyDescrObject *descr;
  descr = (PyDescrObject *)self;
  Py_VISIT((PyObject*) PyDescr_TYPE(descr));
  return 0;
}

SWIGINTERN PyObject *
SwigPyStaticVar_get(PyGetSetDescrObject *descr, PyObject *obj, PyObject *SWIGUNUSEDPARM(type)) {
  if (descr->d_getset->get != NULL)
    return descr->d_getset->get(obj, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not readable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not readable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return NULL;
}

SWIGINTERN int
SwigPyStaticVar_set(PyGetSetDescrObject *descr, PyObject *obj, PyObject *value) {
  if (descr->d_getset->set != NULL)
    return descr->d_getset->set(obj, value, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not writable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not writable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return -1;
}

SWIGINTERN int
SwigPyObjectType_setattro(PyObject *typeobject, PyObject *name, PyObject *value) {
  PyObject *attribute;
  PyTypeObject *type;
  descrsetfunc local_set;

  assert(PyType_Check(typeobject));
  type = (PyTypeObject *)typeobject;
  attribute = _PyType_Lookup(type, name);
  if (attribute != NULL) {
    /* Implement descriptor functionality, if any */
    local_set = attribute->ob_type->tp_descr_set;
    if (local_set != NULL)
      return local_set(attribute, (PyObject *)type, value);
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400S'", type->tp_name, name);
#else 
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400S'", type->tp_name, name);
#else
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  }

  return -1;
}

SWIGINTERN PyTypeObject*
SwigPyStaticVar_Type(void) {
  static PyTypeObject staticvar_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
      PyObject_HEAD_INIT(&PyType_Type)
      0,                                        /* ob_size */
#endif
      "swig_static_var_getset_descriptor",      /* tp_name */
      sizeof(PyGetSetDescrObject),              /* tp_basicsize */
      0,                                        /* tp_itemsize */
      (destructor)SwigPyStaticVar_dealloc,      /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                             /* tp_print */
#else
      (Py_ssize_t)0,                            /* tp_vectorcall_offset */
#endif
      0,                                        /* tp_getattr */
      0,                                        /* tp_setattr */
      0,                                        /* tp_compare */
      (reprfunc)SwigPyStaticVar_repr,           /* tp_repr */
      0,                                        /* tp_as_number */
      0,                                        /* tp_as_sequence */
      0,                                        /* tp_as_mapping */
      0,                                        /* tp_hash */
      0,                                        /* tp_call */
      0,                                        /* tp_str */
      PyObject_GenericGetAttr,                  /* tp_getattro */
      0,                                        /* tp_setattro */
      0,                                        /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_CLASS, /* tp_flags */
      0,                                        /* tp_doc */
      SwigPyStaticVar_traverse,                 /* tp_traverse */
      0,                                        /* tp_clear */
      0,                                        /* tp_richcompare */
      0,                                        /* tp_weaklistoffset */
      0,                                        /* tp_iter */
      0,                                        /* tp_iternext */
      0,                                        /* tp_methods */
      0,                                        /* tp_members */
      0,                                        /* tp_getset */
      0,                                        /* tp_base */
      0,                                        /* tp_dict */
      (descrgetfunc)SwigPyStaticVar_get,        /* tp_descr_get */
      (descrsetfunc)SwigPyStaticVar_set,        /* tp_descr_set */
      0,                                        /* tp_dictoffset */
      0,                                        /* tp_init */
      0,                                        /* tp_alloc */
      0,                                        /* tp_new */
      0,                                        /* tp_free */
      0,                                        /* tp_is_gc */
      0,                                        /* tp_bases */
      0,                                        /* tp_mro */
      0,                                        /* tp_cache */
      0,                                        /* tp_subclasses */
      0,                                        /* tp_weaklist */
      0,                                        /* tp_del */
      0,                                        /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                        /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                        /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                        /* tp_allocs */
      0,                                        /* tp_frees */
      0,                                        /* tp_maxalloc */
      0,                                        /* tp_prev */
      0                                         /* tp_next */
#endif
    };
    staticvar_type = tmp;
    type_init = 1;
    if (PyType_Ready(&staticvar_type) < 0)
      return NULL;
  }
  return &staticvar_type;
}

SWIGINTERN PyTypeObject*
SwigPyObjectType(void) {
  static char swigpyobjecttype_doc[] = "Metaclass for SWIG wrapped types";
  static PyTypeObject swigpyobjecttype_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
      PyObject_HEAD_INIT(&PyType_Type)
      0,                                        /* ob_size */
#endif
      "SwigPyObjectType",                       /* tp_name */
      PyType_Type.tp_basicsize,                 /* tp_basicsize */
      0,                                        /* tp_itemsize */
      0,                                        /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                             /* tp_print */
#else
      (Py_ssize_t)0,                            /* tp_vectorcall_offset */
#endif
      0,                                        /* tp_getattr */
      0,                                        /* tp_setattr */
      0,                                        /* tp_compare */
      0,                                        /* tp_repr */
      0,                                        /* tp_as_number */
      0,                                        /* tp_as_sequence */
      0,                                        /* tp_as_mapping */
      0,                                        /* tp_hash */
      0,                                        /* tp_call */
      0,                                        /* tp_str */
      0,                                        /* tp_getattro */
      SwigPyObjectType_setattro,                /* tp_setattro */
      0,                                        /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_CLASS, /* tp_flags */
      swigpyobjecttype_doc,                     /* tp_doc */
      0,                                        /* tp_traverse */
      0,                                        /* tp_clear */
      0,                                        /* tp_richcompare */
      0,                                        /* tp_weaklistoffset */
      0,                                        /* tp_iter */
      0,                                        /* tp_iternext */
      0,                                        /* tp_methods */
      0,                                        /* tp_members */
      0,                                        /* tp_getset */
      0,                                        /* tp_base */
      0,                                        /* tp_dict */
      0,                                        /* tp_descr_get */
      0,                                        /* tp_descr_set */
      0,                                        /* tp_dictoffset */
      0,                                        /* tp_init */
      0,                                        /* tp_alloc */
      0,                                        /* tp_new */
      0,                                        /* tp_free */
      0,                                        /* tp_is_gc */
      0,                                        /* tp_bases */
      0,                                        /* tp_mro */
      0,                                        /* tp_cache */
      0,                                        /* tp_subclasses */
      0,                                        /* tp_weaklist */
      0,                                        /* tp_del */
      0,                                        /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                        /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                        /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                        /* tp_allocs */
      0,                                        /* tp_frees */
      0,                                        /* tp_maxalloc */
      0,                                        /* tp_prev */
      0                                         /* tp_next */
#endif
    };
    swigpyobjecttype_type = tmp;
    type_init = 1;
    swigpyobjecttype_type.tp_base = &PyType_Type;
    if (PyType_Ready(&swigpyobjecttype_type) < 0)
      return NULL;
  }
  return &swigpyobjecttype_type;
}

SWIGINTERN PyGetSetDescrObject *
SwigPyStaticVar_new_getset(PyTypeObject *type, PyGetSetDef *getset) {

  PyGetSetDescrObject *descr;
  descr = (PyGetSetDescrObject *)PyType_GenericAlloc(SwigPyStaticVar_Type(), 0);
  assert(descr);
  Py_XINCREF(type);
  PyDescr_TYPE(descr) = type;
  PyDescr_NAME(descr) = PyString_InternFromString(getset->name);
  descr->d_getset = getset;
  if (PyDescr_NAME(descr) == NULL) {
    Py_DECREF(descr);
    descr = NULL;
  }
  return descr;
}

SWIGINTERN void
SwigPyBuiltin_InitBases (PyTypeObject *type, PyTypeObject **bases) {
  Py_ssize_t base_count = 0;
  PyTypeObject **b;
  PyObject *tuple;
  Py_ssize_t i;

  if (!bases[0]) {
    bases[0] = SwigPyObject_type();
    bases[1] = NULL;
  }
  type->tp_base = bases[0];
  Py_INCREF((PyObject *)bases[0]);
  for (b = bases; *b != NULL; ++b)
    ++base_count;
  tuple = PyTuple_New(base_count);
  for (i = 0; i < base_count; ++i) {
    Py_INCREF((PyObject *)bases[i]);
    PyTuple_SET_ITEM(tuple, i, (PyObject *)bases[i]);
  }
  type->tp_bases = tuple;
}

SWIGINTERN PyObject *
SwigPyBuiltin_ThisClosure (PyObject *self, void *SWIGUNUSEDPARM(closure)) {
  PyObject *result;
  result = (PyObject *)SWIG_Python_GetSwigThis(self);
  Py_XINCREF(result);
  return result;
}

SWIGINTERN void
SwigPyBuiltin_SetMetaType (PyTypeObject *type, PyTypeObject *metatype)
{
#if PY_VERSION_HEX >= 0x030900a4
    Py_SET_TYPE(type, metatype);
#else
    Py_TYPE(type) = metatype;
#endif
}


/* Start of callback function macros for use in PyTypeObject */

typedef PyObject *(*SwigPyWrapperFunction)(PyObject *, PyObject *);

#define SWIGPY_UNARYFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_unaryfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_unaryfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_unaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_DESTRUCTOR_CLOSURE(wrapper)			\
SWIGINTERN void							\
wrapper##_destructor_closure(PyObject *a) {			\
    SwigPyBuiltin_destructor_closure(wrapper, #wrapper, a);	\
}
SWIGINTERN void
SwigPyBuiltin_destructor_closure(SwigPyWrapperFunction wrapper, const char *wrappername, PyObject *a) {
  SwigPyObject *sobj;
  sobj = (SwigPyObject *)a;
  Py_XDECREF(sobj->dict);
  if (sobj->own) {
    PyObject *o;
    PyObject *type = 0, *value = 0, *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    o = wrapper(a, NULL);
    if (!o) {
      PyObject *deallocname = PyString_FromString(wrappername);
      PyErr_WriteUnraisable(deallocname);
      Py_DECREF(deallocname);
    }
    PyErr_Restore(type, value, traceback);
    Py_XDECREF(o);
  }
  if (PyType_IS_GC(a->ob_type)) {
    PyObject_GC_Del(a);
  } else {
    PyObject_Del(a);
  }
}

#define SWIGPY_INQUIRY_CLOSURE(wrapper)			\
SWIGINTERN int						\
wrapper##_inquiry_closure(PyObject *a) {		\
  return SwigPyBuiltin_inquiry_closure(wrapper, a);	\
}
SWIGINTERN int
SwigPyBuiltin_inquiry_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *pyresult;
  int result;
  pyresult = wrapper(a, NULL);
  result = pyresult && PyObject_IsTrue(pyresult) ? 1 : 0;
  Py_XDECREF(pyresult);
  return result;
}

#define SWIGPY_GETITERFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_getiterfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_getiterfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_getiterfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_BINARYFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *						\
wrapper##_binaryfunc_closure(PyObject *a, PyObject *b) {	\
  return SwigPyBuiltin_binaryfunc_closure(wrapper, a, b);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_binaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(1);
  assert(tuple);
  Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

typedef ternaryfunc ternarycallfunc;

#define SWIGPY_TERNARYFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *							\
wrapper##_ternaryfunc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_ternaryfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ternaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(2);
  assert(tuple);
  Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  Py_INCREF(c);
  PyTuple_SET_ITEM(tuple, 1, c);
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_TERNARYCALLFUNC_CLOSURE(wrapper)					\
SWIGINTERN PyObject *								\
wrapper##_ternarycallfunc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_ternarycallfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ternarycallfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  (void) c;
  return wrapper(a, b);
}

#define SWIGPY_LENFUNC_CLOSURE(wrapper)			\
SWIGINTERN Py_ssize_t					\
wrapper##_lenfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_lenfunc_closure(wrapper, a);	\
}
SWIGINTERN Py_ssize_t
SwigPyBuiltin_lenfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *resultobj;
  Py_ssize_t result;
  resultobj = wrapper(a, NULL);
  result = PyNumber_AsSsize_t(resultobj, NULL);
  Py_DECREF(resultobj);
  return result;
}

#define SWIGPY_SSIZESSIZEARGFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *								\
wrapper##_ssizessizeargfunc_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c) {	\
  return SwigPyBuiltin_ssizessizeargfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ssizessizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, Py_ssize_t c) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_SSIZESSIZEOBJARGPROC_CLOSURE(wrapper)						\
SWIGINTERN int											\
wrapper##_ssizessizeobjargproc_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c, PyObject *d) {	\
  return SwigPyBuiltin_ssizessizeobjargproc_closure(wrapper, a, b, c, d);			\
}
SWIGINTERN int
SwigPyBuiltin_ssizessizeobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, Py_ssize_t c, PyObject *d) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(d ? 3 : 2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));
  if (d) {
    Py_INCREF(d);
    PyTuple_SET_ITEM(tuple, 2, d);
  }
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  Py_DECREF(tuple);
  Py_XDECREF(resultobj);
  return result;
}

#define SWIGPY_SSIZEARGFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *							\
wrapper##_ssizeargfunc_closure(PyObject *a, Py_ssize_t b) {		\
  return SwigPyBuiltin_funpack_ssizeargfunc_closure(wrapper, a, b);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_funpack_ssizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  result = wrapper(a, tuple);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_FUNPACK_SSIZEARGFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *							\
wrapper##_ssizeargfunc_closure(PyObject *a, Py_ssize_t b) {		\
  return SwigPyBuiltin_ssizeargfunc_closure(wrapper, a, b);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ssizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b) {
  PyObject *arg, *result;
  arg = _PyLong_FromSsize_t(b);
  result = wrapper(a, arg);
  Py_DECREF(arg);
  return result;
}

#define SWIGPY_SSIZEOBJARGPROC_CLOSURE(wrapper)					\
SWIGINTERN int									\
wrapper##_ssizeobjargproc_closure(PyObject *a, Py_ssize_t b, PyObject *c) {	\
  return SwigPyBuiltin_ssizeobjargproc_closure(wrapper, a, b, c);		\
}
SWIGINTERN int
SwigPyBuiltin_ssizeobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, PyObject *c) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  Py_INCREF(c);
  PyTuple_SET_ITEM(tuple, 1, c);
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  Py_XDECREF(resultobj);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_OBJOBJPROC_CLOSURE(wrapper)			\
SWIGINTERN int							\
wrapper##_objobjproc_closure(PyObject *a, PyObject *b) {	\
  return SwigPyBuiltin_objobjproc_closure(wrapper, a, b);	\
}
SWIGINTERN int
SwigPyBuiltin_objobjproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b) {
  int result;
  PyObject *pyresult;
  PyObject *tuple;
  tuple = PyTuple_New(1);
  assert(tuple);
  Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  pyresult = wrapper(a, tuple);
  result = pyresult ? (PyObject_IsTrue(pyresult) ? 1 : 0) : -1;
  Py_XDECREF(pyresult);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_FUNPACK_OBJOBJPROC_CLOSURE(wrapper)			\
SWIGINTERN int								\
wrapper##_objobjproc_closure(PyObject *a, PyObject *b) {		\
  return SwigPyBuiltin_funpack_objobjproc_closure(wrapper, a, b);	\
}
SWIGINTERN int
SwigPyBuiltin_funpack_objobjproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b) {
  int result;
  PyObject *pyresult;
  pyresult = wrapper(a, b);
  result = pyresult ? (PyObject_IsTrue(pyresult) ? 1 : 0) : -1;
  Py_XDECREF(pyresult);
  return result;
}

#define SWIGPY_OBJOBJARGPROC_CLOSURE(wrapper)					\
SWIGINTERN int									\
wrapper##_objobjargproc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_objobjargproc_closure(wrapper, a, b, c);			\
}
SWIGINTERN int
SwigPyBuiltin_objobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(c ? 2 : 1);
  assert(tuple);
  Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  if (c) {
    Py_INCREF(c);
    PyTuple_SET_ITEM(tuple, 1, c);
  }
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  Py_XDECREF(resultobj);
  Py_DECREF(tuple);
  return result;
}

#define SWIGPY_REPRFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_reprfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_reprfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_reprfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_HASHFUNC_CLOSURE(wrapper)		\
SWIGINTERN Py_hash_t					\
wrapper##_hashfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_hashfunc_closure(wrapper, a);	\
}
SWIGINTERN Py_hash_t
SwigPyBuiltin_hashfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *pyresult;
  Py_hash_t result;
  pyresult = wrapper(a, NULL);
  if (!pyresult)
    return -1;
  result = SWIG_PyNumber_AsPyHash(pyresult);
  Py_DECREF(pyresult);
  return result;
}

#define SWIGPY_ITERNEXTFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_iternextfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_iternextfunc_closure(wrapper, a);\
}
SWIGINTERN PyObject *
SwigPyBuiltin_iternextfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

/* End of callback function macros for use in PyTypeObject */

#ifdef __cplusplus
}
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, what());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard {
    PyThread_type_lock &mutex_;

  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex) {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }

    ~Guard() {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Decays swig_types[0]
#define SWIGTYPE_p_PropertyMap swig_types[1]
#define SWIGTYPE_p_SwigPyObject swig_types[2]
#define SWIGTYPE_p_Vector3c swig_types[3]
#define SWIGTYPE_p_allocator_type swig_types[4]
#define SWIGTYPE_p_candidate_vector_t swig_types[5]
#define SWIGTYPE_p_char swig_types[6]
#define SWIGTYPE_p_char_type swig_types[7]
#define SWIGTYPE_p_complex_d swig_types[8]
#define SWIGTYPE_p_complex_f swig_types[9]
#define SWIGTYPE_p_const_iterator swig_types[10]
#define SWIGTYPE_p_crpropa__AbstractAccelerationModule swig_types[11]
#define SWIGTYPE_p_crpropa__AbstractCondition swig_types[12]
#define SWIGTYPE_p_crpropa__AdiabaticCooling swig_types[13]
#define SWIGTYPE_p_crpropa__AdvectionField swig_types[14]
#define SWIGTYPE_p_crpropa__AdvectionFieldList swig_types[15]
#define SWIGTYPE_p_crpropa__ArchimedeanSpiralField swig_types[16]
#define SWIGTYPE_p_crpropa__BlackbodyPhotonField swig_types[17]
#define SWIGTYPE_p_crpropa__CMB swig_types[18]
#define SWIGTYPE_p_crpropa__CMZField swig_types[19]
#define SWIGTYPE_p_crpropa__Candidate swig_types[20]
#define SWIGTYPE_p_crpropa__CandidateSplitting swig_types[21]
#define SWIGTYPE_p_crpropa__ConstantDensity swig_types[22]
#define SWIGTYPE_p_crpropa__ConstantMomentumDiffusion swig_types[23]
#define SWIGTYPE_p_crpropa__ConstantSphericalAdvectionField swig_types[24]
#define SWIGTYPE_p_crpropa__Cordes swig_types[25]
#define SWIGTYPE_p_crpropa__CubicBoundary swig_types[26]
#define SWIGTYPE_p_crpropa__CylindricalBoundary swig_types[27]
#define SWIGTYPE_p_crpropa__CylindricalProjectionMap swig_types[28]
#define SWIGTYPE_p_crpropa__Density swig_types[29]
#define SWIGTYPE_p_crpropa__DensityGrid swig_types[30]
#define SWIGTYPE_p_crpropa__DensityList swig_types[31]
#define SWIGTYPE_p_crpropa__DetectionLength swig_types[32]
#define SWIGTYPE_p_crpropa__DiffusionSDE swig_types[33]
#define SWIGTYPE_p_crpropa__DirectedFlowOfScatterCenters swig_types[34]
#define SWIGTYPE_p_crpropa__DirectedFlowScattering swig_types[35]
#define SWIGTYPE_p_crpropa__EMDoublePairProduction swig_types[36]
#define SWIGTYPE_p_crpropa__EMInverseComptonScattering swig_types[37]
#define SWIGTYPE_p_crpropa__EMPairProduction swig_types[38]
#define SWIGTYPE_p_crpropa__EMTripletPairProduction swig_types[39]
#define SWIGTYPE_p_crpropa__ElasticScattering swig_types[40]
#define SWIGTYPE_p_crpropa__ElectronPairProduction swig_types[41]
#define SWIGTYPE_p_crpropa__EllipsoidalBoundary swig_types[42]
#define SWIGTYPE_p_crpropa__EmissionMap swig_types[43]
#define SWIGTYPE_p_crpropa__EmissionMapFiller swig_types[44]
#define SWIGTYPE_p_crpropa__Ferriere swig_types[45]
#define SWIGTYPE_p_crpropa__FutureRedshift swig_types[46]
#define SWIGTYPE_p_crpropa__GridProperties swig_types[47]
#define SWIGTYPE_p_crpropa__GridT_crpropa__Vector3T_double_t_t swig_types[48]
#define SWIGTYPE_p_crpropa__GridT_crpropa__Vector3T_float_t_t swig_types[49]
#define SWIGTYPE_p_crpropa__GridT_double_t swig_types[50]
#define SWIGTYPE_p_crpropa__GridT_float_t swig_types[51]
#define SWIGTYPE_p_crpropa__IRB_Dominguez11 swig_types[52]
#define SWIGTYPE_p_crpropa__IRB_Finke10 swig_types[53]
#define SWIGTYPE_p_crpropa__IRB_Franceschini08 swig_types[54]
#define SWIGTYPE_p_crpropa__IRB_Gilmore12 swig_types[55]
#define SWIGTYPE_p_crpropa__IRB_Kneiske04 swig_types[56]
#define SWIGTYPE_p_crpropa__IRB_Saldana21 swig_types[57]
#define SWIGTYPE_p_crpropa__IRB_Saldana21_lower swig_types[58]
#define SWIGTYPE_p_crpropa__IRB_Saldana21_upper swig_types[59]
#define SWIGTYPE_p_crpropa__IRB_Stecker05 swig_types[60]
#define SWIGTYPE_p_crpropa__IRB_Stecker16_lower swig_types[61]
#define SWIGTYPE_p_crpropa__IRB_Stecker16_upper swig_types[62]
#define SWIGTYPE_p_crpropa__JF12Field swig_types[63]
#define SWIGTYPE_p_crpropa__JF12FieldSolenoidal swig_types[64]
#define SWIGTYPE_p_crpropa__LogarithmicSpiralField swig_types[65]
#define SWIGTYPE_p_crpropa__MagneticDipoleField swig_types[66]
#define SWIGTYPE_p_crpropa__MagneticField swig_types[67]
#define SWIGTYPE_p_crpropa__MagneticFieldEvolution swig_types[68]
#define SWIGTYPE_p_crpropa__MagneticFieldGrid swig_types[69]
#define SWIGTYPE_p_crpropa__MagneticFieldList swig_types[70]
#define SWIGTYPE_p_crpropa__MaximumTrajectoryLength swig_types[71]
#define SWIGTYPE_p_crpropa__MinimumChargeNumber swig_types[72]
#define SWIGTYPE_p_crpropa__MinimumEnergy swig_types[73]
#define SWIGTYPE_p_crpropa__MinimumEnergyPerParticleId swig_types[74]
#define SWIGTYPE_p_crpropa__MinimumRedshift swig_types[75]
#define SWIGTYPE_p_crpropa__MinimumRigidity swig_types[76]
#define SWIGTYPE_p_crpropa__ModulatedMagneticFieldGrid swig_types[77]
#define SWIGTYPE_p_crpropa__Module swig_types[78]
#define SWIGTYPE_p_crpropa__ModuleList swig_types[79]
#define SWIGTYPE_p_crpropa__ModuleListRunner swig_types[80]
#define SWIGTYPE_p_crpropa__Nakanishi swig_types[81]
#define SWIGTYPE_p_crpropa__NuclearDecay swig_types[82]
#define SWIGTYPE_p_crpropa__ObliqueAdvectionShock swig_types[83]
#define SWIGTYPE_p_crpropa__Observer swig_types[84]
#define SWIGTYPE_p_crpropa__Observer1D swig_types[85]
#define SWIGTYPE_p_crpropa__ObserverDetectAll swig_types[86]
#define SWIGTYPE_p_crpropa__ObserverElectronVeto swig_types[87]
#define SWIGTYPE_p_crpropa__ObserverFeature swig_types[88]
#define SWIGTYPE_p_crpropa__ObserverInactiveVeto swig_types[89]
#define SWIGTYPE_p_crpropa__ObserverNeutrinoVeto swig_types[90]
#define SWIGTYPE_p_crpropa__ObserverNucleusVeto swig_types[91]
#define SWIGTYPE_p_crpropa__ObserverParticleIdVeto swig_types[92]
#define SWIGTYPE_p_crpropa__ObserverPhotonVeto swig_types[93]
#define SWIGTYPE_p_crpropa__ObserverRedshiftWindow swig_types[94]
#define SWIGTYPE_p_crpropa__ObserverSurface swig_types[95]
#define SWIGTYPE_p_crpropa__ObserverTimeEvolution swig_types[96]
#define SWIGTYPE_p_crpropa__ObserverTracking swig_types[97]
#define SWIGTYPE_p_crpropa__OneDimensionalCartesianShock swig_types[98]
#define SWIGTYPE_p_crpropa__OneDimensionalSphericalShock swig_types[99]
#define SWIGTYPE_p_crpropa__Output swig_types[100]
#define SWIGTYPE_p_crpropa__PT11Field swig_types[101]
#define SWIGTYPE_p_crpropa__ParaxialBox swig_types[102]
#define SWIGTYPE_p_crpropa__ParticleCollector swig_types[103]
#define SWIGTYPE_p_crpropa__ParticleFilter swig_types[104]
#define SWIGTYPE_p_crpropa__ParticleSplitting swig_types[105]
#define SWIGTYPE_p_crpropa__PerformanceModule swig_types[106]
#define SWIGTYPE_p_crpropa__PeriodicBox swig_types[107]
#define SWIGTYPE_p_crpropa__PeriodicMagneticField swig_types[108]
#define SWIGTYPE_p_crpropa__PhotoDisintegration swig_types[109]
#define SWIGTYPE_p_crpropa__PhotoPionProduction swig_types[110]
#define SWIGTYPE_p_crpropa__PhotonField swig_types[111]
#define SWIGTYPE_p_crpropa__PhotonOutput1D swig_types[112]
#define SWIGTYPE_p_crpropa__PlanckJF12bField swig_types[113]
#define SWIGTYPE_p_crpropa__Plane swig_types[114]
#define SWIGTYPE_p_crpropa__PlaneWaveTurbulence swig_types[115]
#define SWIGTYPE_p_crpropa__PolarizedSingleModeMagneticField swig_types[116]
#define SWIGTYPE_p_crpropa__PropagationBP swig_types[117]
#define SWIGTYPE_p_crpropa__PropagationCK swig_types[118]
#define SWIGTYPE_p_crpropa__QuasiLinearTheory swig_types[119]
#define SWIGTYPE_p_crpropa__Redshift swig_types[120]
#define SWIGTYPE_p_crpropa__Referenced swig_types[121]
#define SWIGTYPE_p_crpropa__ReflectiveBox swig_types[122]
#define SWIGTYPE_p_crpropa__RestrictToRegion swig_types[123]
#define SWIGTYPE_p_crpropa__SecondOrderFermi swig_types[124]
#define SWIGTYPE_p_crpropa__ShellOutput swig_types[125]
#define SWIGTYPE_p_crpropa__ShellOutput1D swig_types[126]
#define SWIGTYPE_p_crpropa__ShellPropertyOutput swig_types[127]
#define SWIGTYPE_p_crpropa__SimplePropagation swig_types[128]
#define SWIGTYPE_p_crpropa__Source swig_types[129]
#define SWIGTYPE_p_crpropa__SourceComposition swig_types[130]
#define SWIGTYPE_p_crpropa__SourceDensityGrid swig_types[131]
#define SWIGTYPE_p_crpropa__SourceDensityGrid1D swig_types[132]
#define SWIGTYPE_p_crpropa__SourceDirectedEmission swig_types[133]
#define SWIGTYPE_p_crpropa__SourceDirection swig_types[134]
#define SWIGTYPE_p_crpropa__SourceEmissionCone swig_types[135]
#define SWIGTYPE_p_crpropa__SourceEmissionMap swig_types[136]
#define SWIGTYPE_p_crpropa__SourceEnergy swig_types[137]
#define SWIGTYPE_p_crpropa__SourceFeature swig_types[138]
#define SWIGTYPE_p_crpropa__SourceInterface swig_types[139]
#define SWIGTYPE_p_crpropa__SourceIsotropicEmission swig_types[140]
#define SWIGTYPE_p_crpropa__SourceLambertDistributionOnSphere swig_types[141]
#define SWIGTYPE_p_crpropa__SourceList swig_types[142]
#define SWIGTYPE_p_crpropa__SourceMassDistribution swig_types[143]
#define SWIGTYPE_p_crpropa__SourceMultipleParticleTypes swig_types[144]
#define SWIGTYPE_p_crpropa__SourceMultiplePositions swig_types[145]
#define SWIGTYPE_p_crpropa__SourceParticleType swig_types[146]
#define SWIGTYPE_p_crpropa__SourcePosition swig_types[147]
#define SWIGTYPE_p_crpropa__SourcePowerLawSpectrum swig_types[148]
#define SWIGTYPE_p_crpropa__SourcePulsarDistribution swig_types[149]
#define SWIGTYPE_p_crpropa__SourceRedshift swig_types[150]
#define SWIGTYPE_p_crpropa__SourceRedshift1D swig_types[151]
#define SWIGTYPE_p_crpropa__SourceRedshiftEvolution swig_types[152]
#define SWIGTYPE_p_crpropa__SourceSNRDistribution swig_types[153]
#define SWIGTYPE_p_crpropa__SourceTag swig_types[154]
#define SWIGTYPE_p_crpropa__SourceUniform1D swig_types[155]
#define SWIGTYPE_p_crpropa__SourceUniformBox swig_types[156]
#define SWIGTYPE_p_crpropa__SourceUniformCylinder swig_types[157]
#define SWIGTYPE_p_crpropa__SourceUniformHollowSphere swig_types[158]
#define SWIGTYPE_p_crpropa__SourceUniformRedshift swig_types[159]
#define SWIGTYPE_p_crpropa__SourceUniformShell swig_types[160]
#define SWIGTYPE_p_crpropa__SourceUniformSphere swig_types[161]
#define SWIGTYPE_p_crpropa__Sphere swig_types[162]
#define SWIGTYPE_p_crpropa__SphericalAdvectionField swig_types[163]
#define SWIGTYPE_p_crpropa__SphericalAdvectionShock swig_types[164]
#define SWIGTYPE_p_crpropa__SphericalBoundary swig_types[165]
#define SWIGTYPE_p_crpropa__StepLengthModifier swig_types[166]
#define SWIGTYPE_p_crpropa__Surface swig_types[167]
#define SWIGTYPE_p_crpropa__SynchrotronRadiation swig_types[168]
#define SWIGTYPE_p_crpropa__TF17Field swig_types[169]
#define SWIGTYPE_p_crpropa__TabularPhotonField swig_types[170]
#define SWIGTYPE_p_crpropa__TextOutput swig_types[171]
#define SWIGTYPE_p_crpropa__ToroidalHaloField swig_types[172]
#define SWIGTYPE_p_crpropa__TurbulenceSpectrum swig_types[173]
#define SWIGTYPE_p_crpropa__TurbulentField swig_types[174]
#define SWIGTYPE_p_crpropa__URB_Fixsen11 swig_types[175]
#define SWIGTYPE_p_crpropa__URB_Nitu21 swig_types[176]
#define SWIGTYPE_p_crpropa__URB_Protheroe96 swig_types[177]
#define SWIGTYPE_p_crpropa__UniformAdvectionField swig_types[178]
#define SWIGTYPE_p_crpropa__UniformMagneticField swig_types[179]
#define SWIGTYPE_p_crpropa__Vector3T_double_t swig_types[180]
#define SWIGTYPE_p_crpropa__Vector3T_float_t swig_types[181]
#define SWIGTYPE_p_difference_type swig_types[182]
#define SWIGTYPE_p_element_type swig_types[183]
#define SWIGTYPE_p_first_type swig_types[184]
#define SWIGTYPE_p_fmtflags swig_types[185]
#define SWIGTYPE_p_int swig_types[186]
#define SWIGTYPE_p_int_type swig_types[187]
#define SWIGTYPE_p_iostate swig_types[188]
#define SWIGTYPE_p_iterator swig_types[189]
#define SWIGTYPE_p_key_t swig_types[190]
#define SWIGTYPE_p_key_type swig_types[191]
#define SWIGTYPE_p_long_long swig_types[192]
#define SWIGTYPE_p_map_t swig_types[193]
#define SWIGTYPE_p_module_list_t swig_types[194]
#define SWIGTYPE_p_off_type swig_types[195]
#define SWIGTYPE_p_openmode swig_types[196]
#define SWIGTYPE_p_pos_type swig_types[197]
#define SWIGTYPE_p_second_type swig_types[198]
#define SWIGTYPE_p_seekdir swig_types[199]
#define SWIGTYPE_p_short swig_types[200]
#define SWIGTYPE_p_signed_char swig_types[201]
#define SWIGTYPE_p_size_t swig_types[202]
#define SWIGTYPE_p_size_type swig_types[203]
#define SWIGTYPE_p_state_type swig_types[204]
#define SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[205]
#define SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[206]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[207]
#define SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[208]
#define SWIGTYPE_p_traits_type swig_types[209]
#define SWIGTYPE_p_unsigned_char swig_types[210]
#define SWIGTYPE_p_unsigned_int swig_types[211]
#define SWIGTYPE_p_unsigned_long_long swig_types[212]
#define SWIGTYPE_p_unsigned_short swig_types[213]
#define SWIGTYPE_p_value_type swig_types[214]
#define SWIGTYPE_p_vector_const_iterator swig_types[215]
#define SWIGTYPE_p_vector_iterator swig_types[216]
#define SWIGTYPE_p_vector_t swig_types[217]
static swig_type_info *swig_types[219];
static swig_module_info swig_module = {swig_types, 218, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _Decays.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__Decays

#else
#  define SWIG_init    init_Decays

#endif
#define SWIG_name    "_Decays"

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <stddef.h>


#include "CRPropa.h"
#include "Decays.h"


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    if (PyString_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "Decays_wrap.h"

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int _wrap_new_Decays__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  bool arg1 ;
  double arg2 ;
  bool val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Decays *result = 0 ;
  
  (void)self;
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Decays" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Decays" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (Decays *)new Decays(arg1,arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Decays, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Decays__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  Decays *result = 0 ;
  
  (void)self;
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Decays" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (Decays *)new Decays(arg1);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Decays, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Decays__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  Decays *result = 0 ;
  
  (void)self;
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = (Decays *)new Decays();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Decays, SWIG_BUILTIN_INIT |  0 );
  result->addReference();
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Decays(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_Decays")) SWIG_fail;
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Decays", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Decays__SWIG_2(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Decays__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Decays__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Decays'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Decays::Decays(bool,double)\n"
    "    Decays::Decays(bool)\n"
    "    Decays::Decays()\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_Decays_setHaveSecondaries(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Decays *arg1 = (Decays *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Decays, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Decays_setHaveSecondaries" "', argument " "1"" of type '" "Decays *""'"); 
  }
  arg1 = reinterpret_cast< Decays * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Decays_setHaveSecondaries" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setHaveSecondaries(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decays_setLimit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Decays *arg1 = (Decays *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Decays, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Decays_setLimit" "', argument " "1"" of type '" "Decays *""'"); 
  }
  arg1 = reinterpret_cast< Decays * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Decays_setLimit" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        (arg1)->setLimit(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decays_setDecayTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Decays *arg1 = (Decays *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Decays, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Decays_setDecayTag" "', argument " "1"" of type '" "Decays const *""'"); 
  }
  arg1 = reinterpret_cast< Decays * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Decays_setDecayTag" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        ((Decays const *)arg1)->setDecayTag(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decays_getDecayTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Decays *arg1 = (Decays *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "Decays_getDecayTag", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Decays, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Decays_getDecayTag" "', argument " "1"" of type '" "Decays const *""'"); 
  }
  arg1 = reinterpret_cast< Decays * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        result = ((Decays const *)arg1)->getDecayTag();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decays_performDecay(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Decays *arg1 = (Decays *) 0 ;
  crpropa::Candidate *arg2 = (crpropa::Candidate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Decays, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Decays_performDecay" "', argument " "1"" of type '" "Decays const *""'"); 
  }
  arg1 = reinterpret_cast< Decays * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2,SWIGTYPE_p_crpropa__Candidate, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Decays_performDecay" "', argument " "2"" of type '" "crpropa::Candidate *""'"); 
  }
  arg2 = reinterpret_cast< crpropa::Candidate * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        ((Decays const *)arg1)->performDecay(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decays_process(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Decays *arg1 = (Decays *) 0 ;
  crpropa::Candidate *arg2 = (crpropa::Candidate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  (void)self;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Decays, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Decays_process" "', argument " "1"" of type '" "Decays const *""'"); 
  }
  arg1 = reinterpret_cast< Decays * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2,SWIGTYPE_p_crpropa__Candidate, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Decays_process" "', argument " "2"" of type '" "crpropa::Candidate *""'"); 
  }
  arg2 = reinterpret_cast< crpropa::Candidate * >(argp2);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        ((Decays const *)arg1)->process(arg2);
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Decays(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Decays *arg1 = (Decays *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  (void)self;
  if (!SWIG_Python_UnpackTuple(args, "delete_Decays", 0, 0, 0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Decays, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Decays" "', argument " "1"" of type '" "Decays *""'"); 
  }
  arg1 = reinterpret_cast< Decays * >(argp1);
  {
    try {
      {
        SWIG_PYTHON_THREAD_BEGIN_ALLOW;
        arg1->removeReference();
        SWIG_PYTHON_THREAD_END_ALLOW;
      }
    } catch (Swig::DirectorException &e) {
      SWIG_exception(SWIG_RuntimeError, e.getMessage());
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (const char *e) {
      SWIG_exception(SWIG_RuntimeError, e);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Decays) /* defines _wrap_delete_Decays_destructor_closure */

static PyMethodDef SwigMethods[] = {
	 { NULL, NULL, 0, NULL }
};

static SwigPyGetSet Decays___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Decays_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_FunpackGetterClosure, 0, (char *)"Decays : p.Decays", &Decays___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Decays_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Decays_methods[] = {
  { "setHaveSecondaries", _wrap_Decays_setHaveSecondaries, METH_O, "setHaveSecondaries(Decays self, bool haveSecondaries)" },
  { "setLimit", _wrap_Decays_setLimit, METH_O, "setLimit(Decays self, double limit)" },
  { "setDecayTag", _wrap_Decays_setDecayTag, METH_O, "setDecayTag(Decays self, std::string tag)" },
  { "getDecayTag", _wrap_Decays_getDecayTag, METH_NOARGS, "getDecayTag(Decays self) -> std::string" },
  { "performDecay", _wrap_Decays_performDecay, METH_O, "performDecay(Decays self, Candidate candidate)" },
  { "process", _wrap_Decays_process, METH_O, "process(Decays self, Candidate candidate)" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__Decays_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "Decays.Decays",                          /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    _wrap_delete_Decays_destructor_closure,   /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                            /* tp_print */
#else
    (Py_ssize_t) 0,                           /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__Decays_type.as_number,    /* tp_as_number */
    &SwigPyBuiltin__Decays_type.as_sequence,  /* tp_as_sequence */
    &SwigPyBuiltin__Decays_type.as_mapping,   /* tp_as_mapping */
    SwigPyObject_hash,                        /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__Decays_type.as_buffer,    /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "::Decays",                               /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    SwigPyBuiltin__Decays_richcompare,        /* tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__Decays_methods,            /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__Decays_getset,             /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    offsetof(SwigPyObject, dict),             /* tp_dictoffset */
    _wrap_new_Decays,                         /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject *) 0,                           /* tp_bases */
    (PyObject *) 0,                           /* tp_mro */
    (PyObject *) 0,                           /* tp_cache */
    (PyObject *) 0,                           /* tp_subclasses */
    (PyObject *) 0,                           /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
    (int) 0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                           /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                       /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                        /* tp_print */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                           /* tp_allocs */
    (Py_ssize_t) 0,                           /* tp_frees */
    (Py_ssize_t) 0,                           /* tp_maxalloc */
    0,                                        /* tp_prev */
    0,                                        /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                            /* am_await */
    (unaryfunc) 0,                            /* am_aiter */
    (unaryfunc) 0,                            /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                             /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
    (unaryfunc) 0,                            /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                           /* nb_matrix_multiply */
    (binaryfunc) 0,                           /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                               /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
  },
    (PyObject *) 0,                           /* ht_name */
    (PyObject *) 0,                           /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                           /* ht_qualname */
    0,                                        /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                           /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                               /* _ht_tpname */
  {
    (PyObject *) 0,                           /* getitem */
  }
#endif
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__Decays_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__Decays_type};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_DecaysTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((Decays *) x));
}
static void *_p_crpropa__AbstractAccelerationModuleTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::AbstractAccelerationModule *) x));
}
static void *_p_crpropa__AbstractConditionTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::AbstractCondition *) x));
}
static void *_p_crpropa__AdiabaticCoolingTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::AdiabaticCooling *) x));
}
static void *_p_crpropa__CandidateSplittingTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::CandidateSplitting *) x));
}
static void *_p_crpropa__ConstantMomentumDiffusionTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ConstantMomentumDiffusion *) x));
}
static void *_p_crpropa__CubicBoundaryTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::CubicBoundary *) x));
}
static void *_p_crpropa__CylindricalBoundaryTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::CylindricalBoundary *) x));
}
static void *_p_crpropa__DetectionLengthTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::DetectionLength *) x));
}
static void *_p_crpropa__DiffusionSDETo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::DiffusionSDE *) x));
}
static void *_p_crpropa__DirectedFlowScatteringTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractAccelerationModule *) ((crpropa::DirectedFlowScattering *) x));
}
static void *_p_crpropa__EMDoublePairProductionTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::EMDoublePairProduction *) x));
}
static void *_p_crpropa__EMInverseComptonScatteringTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::EMInverseComptonScattering *) x));
}
static void *_p_crpropa__EMPairProductionTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::EMPairProduction *) x));
}
static void *_p_crpropa__EMTripletPairProductionTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::EMTripletPairProduction *) x));
}
static void *_p_crpropa__ElasticScatteringTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ElasticScattering *) x));
}
static void *_p_crpropa__ElectronPairProductionTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ElectronPairProduction *) x));
}
static void *_p_crpropa__EllipsoidalBoundaryTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::EllipsoidalBoundary *) x));
}
static void *_p_crpropa__EmissionMapFillerTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::EmissionMapFiller *) x));
}
static void *_p_crpropa__FutureRedshiftTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::FutureRedshift *) x));
}
static void *_p_crpropa__MaximumTrajectoryLengthTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::MaximumTrajectoryLength *) x));
}
static void *_p_crpropa__MinimumChargeNumberTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::MinimumChargeNumber *) x));
}
static void *_p_crpropa__MinimumEnergyTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::MinimumEnergy *) x));
}
static void *_p_crpropa__MinimumEnergyPerParticleIdTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::MinimumEnergyPerParticleId *) x));
}
static void *_p_crpropa__MinimumRedshiftTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::MinimumRedshift *) x));
}
static void *_p_crpropa__MinimumRigidityTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::MinimumRigidity *) x));
}
static void *_p_crpropa__ModuleListTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ModuleList *) x));
}
static void *_p_crpropa__ModuleListRunnerTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ModuleListRunner *) x));
}
static void *_p_crpropa__NuclearDecayTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::NuclearDecay *) x));
}
static void *_p_crpropa__ObserverTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::Observer *) x));
}
static void *_p_crpropa__OutputTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::Output *) x));
}
static void *_p_crpropa__ParticleCollectorTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ParticleCollector *) x));
}
static void *_p_crpropa__ParticleFilterTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::ParticleFilter *) x));
}
static void *_p_crpropa__ParticleSplittingTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ParticleSplitting *) x));
}
static void *_p_crpropa__PerformanceModuleTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::PerformanceModule *) x));
}
static void *_p_crpropa__PeriodicBoxTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::PeriodicBox *) x));
}
static void *_p_crpropa__PhotoDisintegrationTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::PhotoDisintegration *) x));
}
static void *_p_crpropa__PhotoPionProductionTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::PhotoPionProduction *) x));
}
static void *_p_crpropa__PhotonOutput1DTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::PhotonOutput1D *) x));
}
static void *_p_crpropa__PropagationBPTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::PropagationBP *) x));
}
static void *_p_crpropa__PropagationCKTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::PropagationCK *) x));
}
static void *_p_crpropa__RedshiftTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::Redshift *) x));
}
static void *_p_crpropa__ReflectiveBoxTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ReflectiveBox *) x));
}
static void *_p_crpropa__RestrictToRegionTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::RestrictToRegion *) x));
}
static void *_p_crpropa__SecondOrderFermiTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractAccelerationModule *) ((crpropa::SecondOrderFermi *) x));
}
static void *_p_crpropa__ShellOutputTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ShellOutput *) x));
}
static void *_p_crpropa__ShellOutput1DTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ShellOutput1D *) x));
}
static void *_p_crpropa__ShellPropertyOutputTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::ShellPropertyOutput *) x));
}
static void *_p_crpropa__SimplePropagationTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::SimplePropagation *) x));
}
static void *_p_crpropa__SphericalBoundaryTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::AbstractCondition *) ((crpropa::SphericalBoundary *) x));
}
static void *_p_crpropa__SynchrotronRadiationTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *)  ((crpropa::SynchrotronRadiation *) x));
}
static void *_p_crpropa__TextOutputTo_p_crpropa__Module(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Module *) (crpropa::Output *) ((crpropa::TextOutput *) x));
}
static void *_p_DecaysTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((Decays *) x));
}
static void *_p_crpropa__AbstractAccelerationModuleTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::AbstractAccelerationModule *) x));
}
static void *_p_crpropa__AbstractConditionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::AbstractCondition *) x));
}
static void *_p_crpropa__AdiabaticCoolingTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::AdiabaticCooling *) x));
}
static void *_p_crpropa__AdvectionFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::AdvectionField *) x));
}
static void *_p_crpropa__AdvectionFieldListTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::AdvectionField *) ((crpropa::AdvectionFieldList *) x));
}
static void *_p_crpropa__ArchimedeanSpiralFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::ArchimedeanSpiralField *) x));
}
static void *_p_crpropa__BlackbodyPhotonFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *) ((crpropa::BlackbodyPhotonField *) x));
}
static void *_p_crpropa__CMBTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::BlackbodyPhotonField *) ((crpropa::CMB *) x));
}
static void *_p_crpropa__CMZFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::CMZField *) x));
}
static void *_p_crpropa__CandidateTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::Candidate *) x));
}
static void *_p_crpropa__CandidateSplittingTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::CandidateSplitting *) x));
}
static void *_p_crpropa__ConstantDensityTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Density *) ((crpropa::ConstantDensity *) x));
}
static void *_p_crpropa__ConstantMomentumDiffusionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ConstantMomentumDiffusion *) x));
}
static void *_p_crpropa__ConstantSphericalAdvectionFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::AdvectionField *) ((crpropa::ConstantSphericalAdvectionField *) x));
}
static void *_p_crpropa__CordesTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Density *) ((crpropa::Cordes *) x));
}
static void *_p_crpropa__CubicBoundaryTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::CubicBoundary *) x));
}
static void *_p_crpropa__CylindricalBoundaryTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::CylindricalBoundary *) x));
}
static void *_p_crpropa__CylindricalProjectionMapTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::CylindricalProjectionMap *) x));
}
static void *_p_crpropa__DensityTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::Density *) x));
}
static void *_p_crpropa__DensityGridTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Density *) ((crpropa::DensityGrid *) x));
}
static void *_p_crpropa__DensityListTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Density *) ((crpropa::DensityList *) x));
}
static void *_p_crpropa__DetectionLengthTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::DetectionLength *) x));
}
static void *_p_crpropa__DiffusionSDETo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::DiffusionSDE *) x));
}
static void *_p_crpropa__DirectedFlowOfScatterCentersTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::StepLengthModifier *) ((crpropa::DirectedFlowOfScatterCenters *) x));
}
static void *_p_crpropa__DirectedFlowScatteringTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractAccelerationModule *) ((crpropa::DirectedFlowScattering *) x));
}
static void *_p_crpropa__EMDoublePairProductionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::EMDoublePairProduction *) x));
}
static void *_p_crpropa__EMInverseComptonScatteringTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::EMInverseComptonScattering *) x));
}
static void *_p_crpropa__EMPairProductionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::EMPairProduction *) x));
}
static void *_p_crpropa__EMTripletPairProductionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::EMTripletPairProduction *) x));
}
static void *_p_crpropa__ElasticScatteringTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ElasticScattering *) x));
}
static void *_p_crpropa__ElectronPairProductionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ElectronPairProduction *) x));
}
static void *_p_crpropa__EllipsoidalBoundaryTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::EllipsoidalBoundary *) x));
}
static void *_p_crpropa__EmissionMapTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::EmissionMap *) x));
}
static void *_p_crpropa__EmissionMapFillerTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::EmissionMapFiller *) x));
}
static void *_p_crpropa__FerriereTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Density *) ((crpropa::Ferriere *) x));
}
static void *_p_crpropa__FutureRedshiftTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::FutureRedshift *) x));
}
static void *_p_crpropa__GridT_crpropa__Vector3T_double_t_tTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::Grid< crpropa::Vector3< double > > *) x));
}
static void *_p_crpropa__GridT_crpropa__Vector3T_float_t_tTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::Grid< crpropa::Vector3< float > > *) x));
}
static void *_p_crpropa__GridT_double_tTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::Grid< double > *) x));
}
static void *_p_crpropa__GridT_float_tTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::Grid< float > *) x));
}
static void *_p_crpropa__GridPropertiesTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::GridProperties *) x));
}
static void *_p_crpropa__IRB_Dominguez11To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Dominguez11 *) x));
}
static void *_p_crpropa__IRB_Finke10To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Finke10 *) x));
}
static void *_p_crpropa__IRB_Franceschini08To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Franceschini08 *) x));
}
static void *_p_crpropa__IRB_Gilmore12To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Gilmore12 *) x));
}
static void *_p_crpropa__IRB_Kneiske04To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Kneiske04 *) x));
}
static void *_p_crpropa__IRB_Saldana21To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Saldana21 *) x));
}
static void *_p_crpropa__IRB_Saldana21_lowerTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Saldana21_lower *) x));
}
static void *_p_crpropa__IRB_Saldana21_upperTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Saldana21_upper *) x));
}
static void *_p_crpropa__IRB_Stecker05To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Stecker05 *) x));
}
static void *_p_crpropa__IRB_Stecker16_lowerTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Stecker16_lower *) x));
}
static void *_p_crpropa__IRB_Stecker16_upperTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::IRB_Stecker16_upper *) x));
}
static void *_p_crpropa__JF12FieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::JF12Field *) x));
}
static void *_p_crpropa__JF12FieldSolenoidalTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *)(crpropa::JF12Field *) ((crpropa::JF12FieldSolenoidal *) x));
}
static void *_p_crpropa__LogarithmicSpiralFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::LogarithmicSpiralField *) x));
}
static void *_p_crpropa__MagneticDipoleFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::MagneticDipoleField *) x));
}
static void *_p_crpropa__MagneticFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::MagneticField *) x));
}
static void *_p_crpropa__MagneticFieldEvolutionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::MagneticFieldEvolution *) x));
}
static void *_p_crpropa__MagneticFieldGridTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::MagneticFieldGrid *) x));
}
static void *_p_crpropa__MagneticFieldListTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::MagneticFieldList *) x));
}
static void *_p_crpropa__MaximumTrajectoryLengthTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::MaximumTrajectoryLength *) x));
}
static void *_p_crpropa__MinimumChargeNumberTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::MinimumChargeNumber *) x));
}
static void *_p_crpropa__MinimumEnergyTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::MinimumEnergy *) x));
}
static void *_p_crpropa__MinimumEnergyPerParticleIdTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::MinimumEnergyPerParticleId *) x));
}
static void *_p_crpropa__MinimumRedshiftTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::MinimumRedshift *) x));
}
static void *_p_crpropa__MinimumRigidityTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::MinimumRigidity *) x));
}
static void *_p_crpropa__ModulatedMagneticFieldGridTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::ModulatedMagneticFieldGrid *) x));
}
static void *_p_crpropa__ModuleTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::Module *) x));
}
static void *_p_crpropa__ModuleListTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ModuleList *) x));
}
static void *_p_crpropa__ModuleListRunnerTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ModuleListRunner *) x));
}
static void *_p_crpropa__NakanishiTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Density *) ((crpropa::Nakanishi *) x));
}
static void *_p_crpropa__NuclearDecayTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::NuclearDecay *) x));
}
static void *_p_crpropa__ObliqueAdvectionShockTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::AdvectionField *) ((crpropa::ObliqueAdvectionShock *) x));
}
static void *_p_crpropa__ObserverTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::Observer *) x));
}
static void *_p_crpropa__Observer1DTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::Observer1D *) x));
}
static void *_p_crpropa__ObserverDetectAllTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverDetectAll *) x));
}
static void *_p_crpropa__ObserverElectronVetoTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverElectronVeto *) x));
}
static void *_p_crpropa__ObserverFeatureTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::ObserverFeature *) x));
}
static void *_p_crpropa__ObserverInactiveVetoTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverInactiveVeto *) x));
}
static void *_p_crpropa__ObserverNeutrinoVetoTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverNeutrinoVeto *) x));
}
static void *_p_crpropa__ObserverNucleusVetoTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverNucleusVeto *) x));
}
static void *_p_crpropa__ObserverParticleIdVetoTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverParticleIdVeto *) x));
}
static void *_p_crpropa__ObserverPhotonVetoTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverPhotonVeto *) x));
}
static void *_p_crpropa__ObserverRedshiftWindowTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverRedshiftWindow *) x));
}
static void *_p_crpropa__ObserverSurfaceTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverSurface *) x));
}
static void *_p_crpropa__ObserverTimeEvolutionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverTimeEvolution *) x));
}
static void *_p_crpropa__ObserverTrackingTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::ObserverFeature *) ((crpropa::ObserverTracking *) x));
}
static void *_p_crpropa__OneDimensionalCartesianShockTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::AdvectionField *) ((crpropa::OneDimensionalCartesianShock *) x));
}
static void *_p_crpropa__OneDimensionalSphericalShockTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::AdvectionField *) ((crpropa::OneDimensionalSphericalShock *) x));
}
static void *_p_crpropa__OutputTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::Output *) x));
}
static void *_p_crpropa__PT11FieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::PT11Field *) x));
}
static void *_p_crpropa__ParaxialBoxTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Surface *) ((crpropa::ParaxialBox *) x));
}
static void *_p_crpropa__ParticleCollectorTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ParticleCollector *) x));
}
static void *_p_crpropa__ParticleFilterTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::ParticleFilter *) x));
}
static void *_p_crpropa__ParticleSplittingTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ParticleSplitting *) x));
}
static void *_p_crpropa__PerformanceModuleTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::PerformanceModule *) x));
}
static void *_p_crpropa__PeriodicBoxTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::PeriodicBox *) x));
}
static void *_p_crpropa__PeriodicMagneticFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::PeriodicMagneticField *) x));
}
static void *_p_crpropa__PhotoDisintegrationTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::PhotoDisintegration *) x));
}
static void *_p_crpropa__PhotoPionProductionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::PhotoPionProduction *) x));
}
static void *_p_crpropa__PhotonFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::PhotonField *) x));
}
static void *_p_crpropa__PhotonOutput1DTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::PhotonOutput1D *) x));
}
static void *_p_crpropa__PlanckJF12bFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *)(crpropa::JF12Field *) ((crpropa::PlanckJF12bField *) x));
}
static void *_p_crpropa__PlaneTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Surface *) ((crpropa::Plane *) x));
}
static void *_p_crpropa__PlaneWaveTurbulenceTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *)(crpropa::TurbulentField *) ((crpropa::PlaneWaveTurbulence *) x));
}
static void *_p_crpropa__PolarizedSingleModeMagneticFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::PolarizedSingleModeMagneticField *) x));
}
static void *_p_crpropa__PropagationBPTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::PropagationBP *) x));
}
static void *_p_crpropa__PropagationCKTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::PropagationCK *) x));
}
static void *_p_crpropa__QuasiLinearTheoryTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::StepLengthModifier *) ((crpropa::QuasiLinearTheory *) x));
}
static void *_p_crpropa__RedshiftTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::Redshift *) x));
}
static void *_p_crpropa__ReflectiveBoxTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ReflectiveBox *) x));
}
static void *_p_crpropa__RestrictToRegionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::RestrictToRegion *) x));
}
static void *_p_crpropa__SecondOrderFermiTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractAccelerationModule *) ((crpropa::SecondOrderFermi *) x));
}
static void *_p_crpropa__ShellOutputTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ShellOutput *) x));
}
static void *_p_crpropa__ShellOutput1DTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ShellOutput1D *) x));
}
static void *_p_crpropa__ShellPropertyOutputTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::ShellPropertyOutput *) x));
}
static void *_p_crpropa__SimplePropagationTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::SimplePropagation *) x));
}
static void *_p_crpropa__SourceTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceInterface *) ((crpropa::Source *) x));
}
static void *_p_crpropa__SourceCompositionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceComposition *) x));
}
static void *_p_crpropa__SourceDensityGridTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceDensityGrid *) x));
}
static void *_p_crpropa__SourceDensityGrid1DTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceDensityGrid1D *) x));
}
static void *_p_crpropa__SourceDirectedEmissionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceDirectedEmission *) x));
}
static void *_p_crpropa__SourceDirectionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceDirection *) x));
}
static void *_p_crpropa__SourceEmissionConeTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceEmissionCone *) x));
}
static void *_p_crpropa__SourceEmissionMapTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceEmissionMap *) x));
}
static void *_p_crpropa__SourceEnergyTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceEnergy *) x));
}
static void *_p_crpropa__SourceFeatureTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::SourceFeature *) x));
}
static void *_p_crpropa__SourceInterfaceTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::SourceInterface *) x));
}
static void *_p_crpropa__SourceIsotropicEmissionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceIsotropicEmission *) x));
}
static void *_p_crpropa__SourceLambertDistributionOnSphereTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceLambertDistributionOnSphere *) x));
}
static void *_p_crpropa__SourceListTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceInterface *) ((crpropa::SourceList *) x));
}
static void *_p_crpropa__SourceMassDistributionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceMassDistribution *) x));
}
static void *_p_crpropa__SourceMultipleParticleTypesTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceMultipleParticleTypes *) x));
}
static void *_p_crpropa__SourceMultiplePositionsTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceMultiplePositions *) x));
}
static void *_p_crpropa__SourceParticleTypeTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceParticleType *) x));
}
static void *_p_crpropa__SourcePositionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourcePosition *) x));
}
static void *_p_crpropa__SourcePowerLawSpectrumTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourcePowerLawSpectrum *) x));
}
static void *_p_crpropa__SourcePulsarDistributionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourcePulsarDistribution *) x));
}
static void *_p_crpropa__SourceRedshiftTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceRedshift *) x));
}
static void *_p_crpropa__SourceRedshift1DTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceRedshift1D *) x));
}
static void *_p_crpropa__SourceRedshiftEvolutionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceRedshiftEvolution *) x));
}
static void *_p_crpropa__SourceSNRDistributionTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceSNRDistribution *) x));
}
static void *_p_crpropa__SourceTagTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceTag *) x));
}
static void *_p_crpropa__SourceUniform1DTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceUniform1D *) x));
}
static void *_p_crpropa__SourceUniformBoxTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceUniformBox *) x));
}
static void *_p_crpropa__SourceUniformCylinderTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceUniformCylinder *) x));
}
static void *_p_crpropa__SourceUniformHollowSphereTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceUniformHollowSphere *) x));
}
static void *_p_crpropa__SourceUniformRedshiftTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceUniformRedshift *) x));
}
static void *_p_crpropa__SourceUniformShellTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceUniformShell *) x));
}
static void *_p_crpropa__SourceUniformSphereTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::SourceFeature *) ((crpropa::SourceUniformSphere *) x));
}
static void *_p_crpropa__SphereTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Surface *) ((crpropa::Sphere *) x));
}
static void *_p_crpropa__SphericalAdvectionFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::AdvectionField *) ((crpropa::SphericalAdvectionField *) x));
}
static void *_p_crpropa__SphericalAdvectionShockTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::AdvectionField *) ((crpropa::SphericalAdvectionShock *) x));
}
static void *_p_crpropa__SphericalBoundaryTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::AbstractCondition *) ((crpropa::SphericalBoundary *) x));
}
static void *_p_crpropa__StepLengthModifierTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::StepLengthModifier *) x));
}
static void *_p_crpropa__SurfaceTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::Surface *) x));
}
static void *_p_crpropa__SynchrotronRadiationTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *) ((crpropa::SynchrotronRadiation *) x));
}
static void *_p_crpropa__TF17FieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::TF17Field *) x));
}
static void *_p_crpropa__TabularPhotonFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *) ((crpropa::TabularPhotonField *) x));
}
static void *_p_crpropa__TextOutputTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::Module *)(crpropa::Output *) ((crpropa::TextOutput *) x));
}
static void *_p_crpropa__ToroidalHaloFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::ToroidalHaloField *) x));
}
static void *_p_crpropa__TurbulenceSpectrumTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *)  ((crpropa::TurbulenceSpectrum *) x));
}
static void *_p_crpropa__TurbulentFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::TurbulentField *) x));
}
static void *_p_crpropa__URB_Fixsen11To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::URB_Fixsen11 *) x));
}
static void *_p_crpropa__URB_Nitu21To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::URB_Nitu21 *) x));
}
static void *_p_crpropa__URB_Protheroe96To_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::PhotonField *)(crpropa::TabularPhotonField *) ((crpropa::URB_Protheroe96 *) x));
}
static void *_p_crpropa__UniformAdvectionFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::AdvectionField *) ((crpropa::UniformAdvectionField *) x));
}
static void *_p_crpropa__UniformMagneticFieldTo_p_crpropa__Referenced(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((crpropa::Referenced *) (crpropa::MagneticField *) ((crpropa::UniformMagneticField *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *) (std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_istream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_ostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static swig_type_info _swigt__p_Decays = {"_p_Decays", "Decays *", 0, 0, (void*)&SwigPyBuiltin__Decays_clientdata, 0};
static swig_type_info _swigt__p_PropertyMap = {"_p_PropertyMap", "PropertyMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SwigPyObject = {"_p_SwigPyObject", "SwigPyObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vector3c = {"_p_Vector3c", "Vector3c *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_candidate_vector_t = {"_p_candidate_vector_t", "candidate_vector_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char_type = {"_p_char_type", "char_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_complex_d = {"_p_complex_d", "complex_d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_complex_f = {"_p_complex_f", "complex_f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__Candidate = {"_p_crpropa__Candidate", "crpropa::Candidate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__GridT_crpropa__Vector3T_double_t_t = {"_p_crpropa__GridT_crpropa__Vector3T_double_t_t", "crpropa::Grid3d *|crpropa::Grid< crpropa::Vector3< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__GridT_crpropa__Vector3T_float_t_t = {"_p_crpropa__GridT_crpropa__Vector3T_float_t_t", "crpropa::Grid3f *|crpropa::Grid< crpropa::Vector3< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__GridT_double_t = {"_p_crpropa__GridT_double_t", "crpropa::Grid1d *|crpropa::Grid< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__GridT_float_t = {"_p_crpropa__GridT_float_t", "crpropa::Grid1f *|crpropa::Grid< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__Module = {"_p_crpropa__Module", "crpropa::Module *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__AbstractAccelerationModule = {"_p_crpropa__AbstractAccelerationModule", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__AbstractCondition = {"_p_crpropa__AbstractCondition", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__AdiabaticCooling = {"_p_crpropa__AdiabaticCooling", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__CandidateSplitting = {"_p_crpropa__CandidateSplitting", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ConstantMomentumDiffusion = {"_p_crpropa__ConstantMomentumDiffusion", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__CubicBoundary = {"_p_crpropa__CubicBoundary", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__CylindricalBoundary = {"_p_crpropa__CylindricalBoundary", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__DetectionLength = {"_p_crpropa__DetectionLength", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__DiffusionSDE = {"_p_crpropa__DiffusionSDE", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__DirectedFlowScattering = {"_p_crpropa__DirectedFlowScattering", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__EMDoublePairProduction = {"_p_crpropa__EMDoublePairProduction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__EMInverseComptonScattering = {"_p_crpropa__EMInverseComptonScattering", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__EMPairProduction = {"_p_crpropa__EMPairProduction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__EMTripletPairProduction = {"_p_crpropa__EMTripletPairProduction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ElasticScattering = {"_p_crpropa__ElasticScattering", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ElectronPairProduction = {"_p_crpropa__ElectronPairProduction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__EllipsoidalBoundary = {"_p_crpropa__EllipsoidalBoundary", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__EmissionMapFiller = {"_p_crpropa__EmissionMapFiller", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__FutureRedshift = {"_p_crpropa__FutureRedshift", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MaximumTrajectoryLength = {"_p_crpropa__MaximumTrajectoryLength", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MinimumChargeNumber = {"_p_crpropa__MinimumChargeNumber", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MinimumEnergy = {"_p_crpropa__MinimumEnergy", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MinimumEnergyPerParticleId = {"_p_crpropa__MinimumEnergyPerParticleId", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MinimumRedshift = {"_p_crpropa__MinimumRedshift", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MinimumRigidity = {"_p_crpropa__MinimumRigidity", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ModuleList = {"_p_crpropa__ModuleList", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ModuleListRunner = {"_p_crpropa__ModuleListRunner", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__NuclearDecay = {"_p_crpropa__NuclearDecay", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Observer = {"_p_crpropa__Observer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Output = {"_p_crpropa__Output", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ParticleCollector = {"_p_crpropa__ParticleCollector", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ParticleFilter = {"_p_crpropa__ParticleFilter", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ParticleSplitting = {"_p_crpropa__ParticleSplitting", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PerformanceModule = {"_p_crpropa__PerformanceModule", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PeriodicBox = {"_p_crpropa__PeriodicBox", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PhotoDisintegration = {"_p_crpropa__PhotoDisintegration", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PhotoPionProduction = {"_p_crpropa__PhotoPionProduction", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PhotonOutput1D = {"_p_crpropa__PhotonOutput1D", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PropagationBP = {"_p_crpropa__PropagationBP", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PropagationCK = {"_p_crpropa__PropagationCK", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Redshift = {"_p_crpropa__Redshift", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ReflectiveBox = {"_p_crpropa__ReflectiveBox", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__RestrictToRegion = {"_p_crpropa__RestrictToRegion", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SecondOrderFermi = {"_p_crpropa__SecondOrderFermi", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ShellOutput = {"_p_crpropa__ShellOutput", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ShellOutput1D = {"_p_crpropa__ShellOutput1D", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ShellPropertyOutput = {"_p_crpropa__ShellPropertyOutput", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SimplePropagation = {"_p_crpropa__SimplePropagation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SphericalBoundary = {"_p_crpropa__SphericalBoundary", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SynchrotronRadiation = {"_p_crpropa__SynchrotronRadiation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__TextOutput = {"_p_crpropa__TextOutput", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Referenced = {"_p_crpropa__Referenced", "crpropa::Referenced *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__AdvectionField = {"_p_crpropa__AdvectionField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__AdvectionFieldList = {"_p_crpropa__AdvectionFieldList", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ArchimedeanSpiralField = {"_p_crpropa__ArchimedeanSpiralField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__BlackbodyPhotonField = {"_p_crpropa__BlackbodyPhotonField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__CMB = {"_p_crpropa__CMB", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__CMZField = {"_p_crpropa__CMZField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ConstantDensity = {"_p_crpropa__ConstantDensity", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ConstantSphericalAdvectionField = {"_p_crpropa__ConstantSphericalAdvectionField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Cordes = {"_p_crpropa__Cordes", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__CylindricalProjectionMap = {"_p_crpropa__CylindricalProjectionMap", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Density = {"_p_crpropa__Density", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__DensityGrid = {"_p_crpropa__DensityGrid", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__DensityList = {"_p_crpropa__DensityList", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__DirectedFlowOfScatterCenters = {"_p_crpropa__DirectedFlowOfScatterCenters", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__EmissionMap = {"_p_crpropa__EmissionMap", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Ferriere = {"_p_crpropa__Ferriere", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__GridProperties = {"_p_crpropa__GridProperties", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Dominguez11 = {"_p_crpropa__IRB_Dominguez11", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Finke10 = {"_p_crpropa__IRB_Finke10", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Franceschini08 = {"_p_crpropa__IRB_Franceschini08", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Gilmore12 = {"_p_crpropa__IRB_Gilmore12", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Kneiske04 = {"_p_crpropa__IRB_Kneiske04", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Saldana21 = {"_p_crpropa__IRB_Saldana21", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Saldana21_lower = {"_p_crpropa__IRB_Saldana21_lower", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Saldana21_upper = {"_p_crpropa__IRB_Saldana21_upper", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Stecker05 = {"_p_crpropa__IRB_Stecker05", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Stecker16_lower = {"_p_crpropa__IRB_Stecker16_lower", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__IRB_Stecker16_upper = {"_p_crpropa__IRB_Stecker16_upper", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__JF12Field = {"_p_crpropa__JF12Field", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__JF12FieldSolenoidal = {"_p_crpropa__JF12FieldSolenoidal", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__LogarithmicSpiralField = {"_p_crpropa__LogarithmicSpiralField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MagneticDipoleField = {"_p_crpropa__MagneticDipoleField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MagneticField = {"_p_crpropa__MagneticField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MagneticFieldEvolution = {"_p_crpropa__MagneticFieldEvolution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MagneticFieldGrid = {"_p_crpropa__MagneticFieldGrid", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__MagneticFieldList = {"_p_crpropa__MagneticFieldList", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ModulatedMagneticFieldGrid = {"_p_crpropa__ModulatedMagneticFieldGrid", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Nakanishi = {"_p_crpropa__Nakanishi", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObliqueAdvectionShock = {"_p_crpropa__ObliqueAdvectionShock", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Observer1D = {"_p_crpropa__Observer1D", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverDetectAll = {"_p_crpropa__ObserverDetectAll", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverElectronVeto = {"_p_crpropa__ObserverElectronVeto", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverFeature = {"_p_crpropa__ObserverFeature", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverInactiveVeto = {"_p_crpropa__ObserverInactiveVeto", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverNeutrinoVeto = {"_p_crpropa__ObserverNeutrinoVeto", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverNucleusVeto = {"_p_crpropa__ObserverNucleusVeto", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverParticleIdVeto = {"_p_crpropa__ObserverParticleIdVeto", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverPhotonVeto = {"_p_crpropa__ObserverPhotonVeto", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverRedshiftWindow = {"_p_crpropa__ObserverRedshiftWindow", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverSurface = {"_p_crpropa__ObserverSurface", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverTimeEvolution = {"_p_crpropa__ObserverTimeEvolution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ObserverTracking = {"_p_crpropa__ObserverTracking", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__OneDimensionalCartesianShock = {"_p_crpropa__OneDimensionalCartesianShock", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__OneDimensionalSphericalShock = {"_p_crpropa__OneDimensionalSphericalShock", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PT11Field = {"_p_crpropa__PT11Field", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ParaxialBox = {"_p_crpropa__ParaxialBox", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PeriodicMagneticField = {"_p_crpropa__PeriodicMagneticField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PhotonField = {"_p_crpropa__PhotonField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PlanckJF12bField = {"_p_crpropa__PlanckJF12bField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Plane = {"_p_crpropa__Plane", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PlaneWaveTurbulence = {"_p_crpropa__PlaneWaveTurbulence", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__PolarizedSingleModeMagneticField = {"_p_crpropa__PolarizedSingleModeMagneticField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__QuasiLinearTheory = {"_p_crpropa__QuasiLinearTheory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Source = {"_p_crpropa__Source", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceComposition = {"_p_crpropa__SourceComposition", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceDensityGrid = {"_p_crpropa__SourceDensityGrid", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceDensityGrid1D = {"_p_crpropa__SourceDensityGrid1D", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceDirectedEmission = {"_p_crpropa__SourceDirectedEmission", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceDirection = {"_p_crpropa__SourceDirection", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceEmissionCone = {"_p_crpropa__SourceEmissionCone", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceEmissionMap = {"_p_crpropa__SourceEmissionMap", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceEnergy = {"_p_crpropa__SourceEnergy", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceFeature = {"_p_crpropa__SourceFeature", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceInterface = {"_p_crpropa__SourceInterface", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceIsotropicEmission = {"_p_crpropa__SourceIsotropicEmission", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceLambertDistributionOnSphere = {"_p_crpropa__SourceLambertDistributionOnSphere", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceList = {"_p_crpropa__SourceList", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceMassDistribution = {"_p_crpropa__SourceMassDistribution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceMultipleParticleTypes = {"_p_crpropa__SourceMultipleParticleTypes", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceMultiplePositions = {"_p_crpropa__SourceMultiplePositions", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceParticleType = {"_p_crpropa__SourceParticleType", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourcePosition = {"_p_crpropa__SourcePosition", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourcePowerLawSpectrum = {"_p_crpropa__SourcePowerLawSpectrum", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourcePulsarDistribution = {"_p_crpropa__SourcePulsarDistribution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceRedshift = {"_p_crpropa__SourceRedshift", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceRedshift1D = {"_p_crpropa__SourceRedshift1D", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceRedshiftEvolution = {"_p_crpropa__SourceRedshiftEvolution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceSNRDistribution = {"_p_crpropa__SourceSNRDistribution", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceTag = {"_p_crpropa__SourceTag", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceUniform1D = {"_p_crpropa__SourceUniform1D", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceUniformBox = {"_p_crpropa__SourceUniformBox", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceUniformCylinder = {"_p_crpropa__SourceUniformCylinder", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceUniformHollowSphere = {"_p_crpropa__SourceUniformHollowSphere", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceUniformRedshift = {"_p_crpropa__SourceUniformRedshift", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceUniformShell = {"_p_crpropa__SourceUniformShell", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SourceUniformSphere = {"_p_crpropa__SourceUniformSphere", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Sphere = {"_p_crpropa__Sphere", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SphericalAdvectionField = {"_p_crpropa__SphericalAdvectionField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__SphericalAdvectionShock = {"_p_crpropa__SphericalAdvectionShock", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__StepLengthModifier = {"_p_crpropa__StepLengthModifier", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Surface = {"_p_crpropa__Surface", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__TF17Field = {"_p_crpropa__TF17Field", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__TabularPhotonField = {"_p_crpropa__TabularPhotonField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__ToroidalHaloField = {"_p_crpropa__ToroidalHaloField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__TurbulenceSpectrum = {"_p_crpropa__TurbulenceSpectrum", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__TurbulentField = {"_p_crpropa__TurbulentField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__URB_Fixsen11 = {"_p_crpropa__URB_Fixsen11", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__URB_Nitu21 = {"_p_crpropa__URB_Nitu21", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__URB_Protheroe96 = {"_p_crpropa__URB_Protheroe96", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__UniformAdvectionField = {"_p_crpropa__UniformAdvectionField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__UniformMagneticField = {"_p_crpropa__UniformMagneticField", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_crpropa__Vector3T_double_t = {"_p_crpropa__Vector3T_double_t", "crpropa::Vector3d *|crpropa::Vector3< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_crpropa__Vector3T_float_t = {"_p_crpropa__Vector3T_float_t", "crpropa::Vector3f *|crpropa::Vector3< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_element_type = {"_p_element_type", "element_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fmtflags = {"_p_fmtflags", "fmtflags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int32_t *|int_fast16_t *|int_fast32_t *|int_least32_t *|intptr_t *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int_type = {"_p_int_type", "int_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iostate = {"_p_iostate", "iostate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_t = {"_p_key_t", "key_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64_t *|int_fast64_t *|int_least64_t *|intmax_t *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_map_t = {"_p_map_t", "map_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_module_list_t = {"_p_module_list_t", "module_list_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_off_type = {"_p_off_type", "off_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openmode = {"_p_openmode", "openmode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pos_type = {"_p_pos_type", "pos_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_seekdir = {"_p_seekdir", "seekdir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "int16_t *|int_least16_t *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "int8_t *|int_fast8_t *|int_least8_t *|signed char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "std::streamsize *|size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_state_type = {"_p_state_type", "state_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iosT_char_std__char_traitsT_char_t_t", "std::ios *|std::basic_ios< char,std::char_traits< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t", "std::iostream *|std::basic_iostream< char,std::char_traits< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::istream *|std::basic_istream< char,std::char_traits< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::ostream *|std::basic_ostream< char,std::char_traits< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_traits_type = {"_p_traits_type", "traits_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "uint8_t *|uint_fast8_t *|uint_least8_t *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint32_t *|uint_fast16_t *|uint_fast32_t *|uint_least32_t *|uintptr_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64_t *|uint_fast64_t *|uint_least64_t *|uintmax_t *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "uint16_t *|uint_least16_t *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vector_const_iterator = {"_p_vector_const_iterator", "vector_const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vector_iterator = {"_p_vector_iterator", "vector_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vector_t = {"_p_vector_t", "vector_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Decays,
  &_swigt__p_PropertyMap,
  &_swigt__p_SwigPyObject,
  &_swigt__p_Vector3c,
  &_swigt__p_allocator_type,
  &_swigt__p_candidate_vector_t,
  &_swigt__p_char,
  &_swigt__p_char_type,
  &_swigt__p_complex_d,
  &_swigt__p_complex_f,
  &_swigt__p_const_iterator,
  &_swigt__p_crpropa__AbstractAccelerationModule,
  &_swigt__p_crpropa__AbstractCondition,
  &_swigt__p_crpropa__AdiabaticCooling,
  &_swigt__p_crpropa__AdvectionField,
  &_swigt__p_crpropa__AdvectionFieldList,
  &_swigt__p_crpropa__ArchimedeanSpiralField,
  &_swigt__p_crpropa__BlackbodyPhotonField,
  &_swigt__p_crpropa__CMB,
  &_swigt__p_crpropa__CMZField,
  &_swigt__p_crpropa__Candidate,
  &_swigt__p_crpropa__CandidateSplitting,
  &_swigt__p_crpropa__ConstantDensity,
  &_swigt__p_crpropa__ConstantMomentumDiffusion,
  &_swigt__p_crpropa__ConstantSphericalAdvectionField,
  &_swigt__p_crpropa__Cordes,
  &_swigt__p_crpropa__CubicBoundary,
  &_swigt__p_crpropa__CylindricalBoundary,
  &_swigt__p_crpropa__CylindricalProjectionMap,
  &_swigt__p_crpropa__Density,
  &_swigt__p_crpropa__DensityGrid,
  &_swigt__p_crpropa__DensityList,
  &_swigt__p_crpropa__DetectionLength,
  &_swigt__p_crpropa__DiffusionSDE,
  &_swigt__p_crpropa__DirectedFlowOfScatterCenters,
  &_swigt__p_crpropa__DirectedFlowScattering,
  &_swigt__p_crpropa__EMDoublePairProduction,
  &_swigt__p_crpropa__EMInverseComptonScattering,
  &_swigt__p_crpropa__EMPairProduction,
  &_swigt__p_crpropa__EMTripletPairProduction,
  &_swigt__p_crpropa__ElasticScattering,
  &_swigt__p_crpropa__ElectronPairProduction,
  &_swigt__p_crpropa__EllipsoidalBoundary,
  &_swigt__p_crpropa__EmissionMap,
  &_swigt__p_crpropa__EmissionMapFiller,
  &_swigt__p_crpropa__Ferriere,
  &_swigt__p_crpropa__FutureRedshift,
  &_swigt__p_crpropa__GridProperties,
  &_swigt__p_crpropa__GridT_crpropa__Vector3T_double_t_t,
  &_swigt__p_crpropa__GridT_crpropa__Vector3T_float_t_t,
  &_swigt__p_crpropa__GridT_double_t,
  &_swigt__p_crpropa__GridT_float_t,
  &_swigt__p_crpropa__IRB_Dominguez11,
  &_swigt__p_crpropa__IRB_Finke10,
  &_swigt__p_crpropa__IRB_Franceschini08,
  &_swigt__p_crpropa__IRB_Gilmore12,
  &_swigt__p_crpropa__IRB_Kneiske04,
  &_swigt__p_crpropa__IRB_Saldana21,
  &_swigt__p_crpropa__IRB_Saldana21_lower,
  &_swigt__p_crpropa__IRB_Saldana21_upper,
  &_swigt__p_crpropa__IRB_Stecker05,
  &_swigt__p_crpropa__IRB_Stecker16_lower,
  &_swigt__p_crpropa__IRB_Stecker16_upper,
  &_swigt__p_crpropa__JF12Field,
  &_swigt__p_crpropa__JF12FieldSolenoidal,
  &_swigt__p_crpropa__LogarithmicSpiralField,
  &_swigt__p_crpropa__MagneticDipoleField,
  &_swigt__p_crpropa__MagneticField,
  &_swigt__p_crpropa__MagneticFieldEvolution,
  &_swigt__p_crpropa__MagneticFieldGrid,
  &_swigt__p_crpropa__MagneticFieldList,
  &_swigt__p_crpropa__MaximumTrajectoryLength,
  &_swigt__p_crpropa__MinimumChargeNumber,
  &_swigt__p_crpropa__MinimumEnergy,
  &_swigt__p_crpropa__MinimumEnergyPerParticleId,
  &_swigt__p_crpropa__MinimumRedshift,
  &_swigt__p_crpropa__MinimumRigidity,
  &_swigt__p_crpropa__ModulatedMagneticFieldGrid,
  &_swigt__p_crpropa__Module,
  &_swigt__p_crpropa__ModuleList,
  &_swigt__p_crpropa__ModuleListRunner,
  &_swigt__p_crpropa__Nakanishi,
  &_swigt__p_crpropa__NuclearDecay,
  &_swigt__p_crpropa__ObliqueAdvectionShock,
  &_swigt__p_crpropa__Observer,
  &_swigt__p_crpropa__Observer1D,
  &_swigt__p_crpropa__ObserverDetectAll,
  &_swigt__p_crpropa__ObserverElectronVeto,
  &_swigt__p_crpropa__ObserverFeature,
  &_swigt__p_crpropa__ObserverInactiveVeto,
  &_swigt__p_crpropa__ObserverNeutrinoVeto,
  &_swigt__p_crpropa__ObserverNucleusVeto,
  &_swigt__p_crpropa__ObserverParticleIdVeto,
  &_swigt__p_crpropa__ObserverPhotonVeto,
  &_swigt__p_crpropa__ObserverRedshiftWindow,
  &_swigt__p_crpropa__ObserverSurface,
  &_swigt__p_crpropa__ObserverTimeEvolution,
  &_swigt__p_crpropa__ObserverTracking,
  &_swigt__p_crpropa__OneDimensionalCartesianShock,
  &_swigt__p_crpropa__OneDimensionalSphericalShock,
  &_swigt__p_crpropa__Output,
  &_swigt__p_crpropa__PT11Field,
  &_swigt__p_crpropa__ParaxialBox,
  &_swigt__p_crpropa__ParticleCollector,
  &_swigt__p_crpropa__ParticleFilter,
  &_swigt__p_crpropa__ParticleSplitting,
  &_swigt__p_crpropa__PerformanceModule,
  &_swigt__p_crpropa__PeriodicBox,
  &_swigt__p_crpropa__PeriodicMagneticField,
  &_swigt__p_crpropa__PhotoDisintegration,
  &_swigt__p_crpropa__PhotoPionProduction,
  &_swigt__p_crpropa__PhotonField,
  &_swigt__p_crpropa__PhotonOutput1D,
  &_swigt__p_crpropa__PlanckJF12bField,
  &_swigt__p_crpropa__Plane,
  &_swigt__p_crpropa__PlaneWaveTurbulence,
  &_swigt__p_crpropa__PolarizedSingleModeMagneticField,
  &_swigt__p_crpropa__PropagationBP,
  &_swigt__p_crpropa__PropagationCK,
  &_swigt__p_crpropa__QuasiLinearTheory,
  &_swigt__p_crpropa__Redshift,
  &_swigt__p_crpropa__Referenced,
  &_swigt__p_crpropa__ReflectiveBox,
  &_swigt__p_crpropa__RestrictToRegion,
  &_swigt__p_crpropa__SecondOrderFermi,
  &_swigt__p_crpropa__ShellOutput,
  &_swigt__p_crpropa__ShellOutput1D,
  &_swigt__p_crpropa__ShellPropertyOutput,
  &_swigt__p_crpropa__SimplePropagation,
  &_swigt__p_crpropa__Source,
  &_swigt__p_crpropa__SourceComposition,
  &_swigt__p_crpropa__SourceDensityGrid,
  &_swigt__p_crpropa__SourceDensityGrid1D,
  &_swigt__p_crpropa__SourceDirectedEmission,
  &_swigt__p_crpropa__SourceDirection,
  &_swigt__p_crpropa__SourceEmissionCone,
  &_swigt__p_crpropa__SourceEmissionMap,
  &_swigt__p_crpropa__SourceEnergy,
  &_swigt__p_crpropa__SourceFeature,
  &_swigt__p_crpropa__SourceInterface,
  &_swigt__p_crpropa__SourceIsotropicEmission,
  &_swigt__p_crpropa__SourceLambertDistributionOnSphere,
  &_swigt__p_crpropa__SourceList,
  &_swigt__p_crpropa__SourceMassDistribution,
  &_swigt__p_crpropa__SourceMultipleParticleTypes,
  &_swigt__p_crpropa__SourceMultiplePositions,
  &_swigt__p_crpropa__SourceParticleType,
  &_swigt__p_crpropa__SourcePosition,
  &_swigt__p_crpropa__SourcePowerLawSpectrum,
  &_swigt__p_crpropa__SourcePulsarDistribution,
  &_swigt__p_crpropa__SourceRedshift,
  &_swigt__p_crpropa__SourceRedshift1D,
  &_swigt__p_crpropa__SourceRedshiftEvolution,
  &_swigt__p_crpropa__SourceSNRDistribution,
  &_swigt__p_crpropa__SourceTag,
  &_swigt__p_crpropa__SourceUniform1D,
  &_swigt__p_crpropa__SourceUniformBox,
  &_swigt__p_crpropa__SourceUniformCylinder,
  &_swigt__p_crpropa__SourceUniformHollowSphere,
  &_swigt__p_crpropa__SourceUniformRedshift,
  &_swigt__p_crpropa__SourceUniformShell,
  &_swigt__p_crpropa__SourceUniformSphere,
  &_swigt__p_crpropa__Sphere,
  &_swigt__p_crpropa__SphericalAdvectionField,
  &_swigt__p_crpropa__SphericalAdvectionShock,
  &_swigt__p_crpropa__SphericalBoundary,
  &_swigt__p_crpropa__StepLengthModifier,
  &_swigt__p_crpropa__Surface,
  &_swigt__p_crpropa__SynchrotronRadiation,
  &_swigt__p_crpropa__TF17Field,
  &_swigt__p_crpropa__TabularPhotonField,
  &_swigt__p_crpropa__TextOutput,
  &_swigt__p_crpropa__ToroidalHaloField,
  &_swigt__p_crpropa__TurbulenceSpectrum,
  &_swigt__p_crpropa__TurbulentField,
  &_swigt__p_crpropa__URB_Fixsen11,
  &_swigt__p_crpropa__URB_Nitu21,
  &_swigt__p_crpropa__URB_Protheroe96,
  &_swigt__p_crpropa__UniformAdvectionField,
  &_swigt__p_crpropa__UniformMagneticField,
  &_swigt__p_crpropa__Vector3T_double_t,
  &_swigt__p_crpropa__Vector3T_float_t,
  &_swigt__p_difference_type,
  &_swigt__p_element_type,
  &_swigt__p_first_type,
  &_swigt__p_fmtflags,
  &_swigt__p_int,
  &_swigt__p_int_type,
  &_swigt__p_iostate,
  &_swigt__p_iterator,
  &_swigt__p_key_t,
  &_swigt__p_key_type,
  &_swigt__p_long_long,
  &_swigt__p_map_t,
  &_swigt__p_module_list_t,
  &_swigt__p_off_type,
  &_swigt__p_openmode,
  &_swigt__p_pos_type,
  &_swigt__p_second_type,
  &_swigt__p_seekdir,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_state_type,
  &_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_traits_type,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_vector_const_iterator,
  &_swigt__p_vector_iterator,
  &_swigt__p_vector_t,
};

static swig_cast_info _swigc__p_Decays[] = {  {&_swigt__p_Decays, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PropertyMap[] = {  {&_swigt__p_PropertyMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SwigPyObject[] = {  {&_swigt__p_SwigPyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vector3c[] = {  {&_swigt__p_Vector3c, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_candidate_vector_t[] = {  {&_swigt__p_candidate_vector_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char_type[] = {  {&_swigt__p_char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_complex_d[] = {  {&_swigt__p_complex_d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_complex_f[] = {  {&_swigt__p_complex_f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Candidate[] = {  {&_swigt__p_crpropa__Candidate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__GridT_crpropa__Vector3T_double_t_t[] = {  {&_swigt__p_crpropa__GridT_crpropa__Vector3T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__GridT_crpropa__Vector3T_float_t_t[] = {  {&_swigt__p_crpropa__GridT_crpropa__Vector3T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__GridT_double_t[] = {  {&_swigt__p_crpropa__GridT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__GridT_float_t[] = {  {&_swigt__p_crpropa__GridT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__AbstractAccelerationModule[] = {{&_swigt__p_crpropa__AbstractAccelerationModule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__AbstractCondition[] = {{&_swigt__p_crpropa__AbstractCondition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__AdiabaticCooling[] = {{&_swigt__p_crpropa__AdiabaticCooling, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__CandidateSplitting[] = {{&_swigt__p_crpropa__CandidateSplitting, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ConstantMomentumDiffusion[] = {{&_swigt__p_crpropa__ConstantMomentumDiffusion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__CubicBoundary[] = {{&_swigt__p_crpropa__CubicBoundary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__CylindricalBoundary[] = {{&_swigt__p_crpropa__CylindricalBoundary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__DetectionLength[] = {{&_swigt__p_crpropa__DetectionLength, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__DiffusionSDE[] = {{&_swigt__p_crpropa__DiffusionSDE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__DirectedFlowScattering[] = {{&_swigt__p_crpropa__DirectedFlowScattering, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__EMDoublePairProduction[] = {{&_swigt__p_crpropa__EMDoublePairProduction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__EMInverseComptonScattering[] = {{&_swigt__p_crpropa__EMInverseComptonScattering, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__EMPairProduction[] = {{&_swigt__p_crpropa__EMPairProduction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__EMTripletPairProduction[] = {{&_swigt__p_crpropa__EMTripletPairProduction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ElasticScattering[] = {{&_swigt__p_crpropa__ElasticScattering, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ElectronPairProduction[] = {{&_swigt__p_crpropa__ElectronPairProduction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__EllipsoidalBoundary[] = {{&_swigt__p_crpropa__EllipsoidalBoundary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__EmissionMapFiller[] = {{&_swigt__p_crpropa__EmissionMapFiller, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__FutureRedshift[] = {{&_swigt__p_crpropa__FutureRedshift, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MaximumTrajectoryLength[] = {{&_swigt__p_crpropa__MaximumTrajectoryLength, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MinimumChargeNumber[] = {{&_swigt__p_crpropa__MinimumChargeNumber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MinimumEnergy[] = {{&_swigt__p_crpropa__MinimumEnergy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MinimumEnergyPerParticleId[] = {{&_swigt__p_crpropa__MinimumEnergyPerParticleId, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MinimumRedshift[] = {{&_swigt__p_crpropa__MinimumRedshift, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MinimumRigidity[] = {{&_swigt__p_crpropa__MinimumRigidity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ModuleList[] = {{&_swigt__p_crpropa__ModuleList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ModuleListRunner[] = {{&_swigt__p_crpropa__ModuleListRunner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__NuclearDecay[] = {{&_swigt__p_crpropa__NuclearDecay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Observer[] = {{&_swigt__p_crpropa__Observer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Output[] = {{&_swigt__p_crpropa__Output, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ParticleCollector[] = {{&_swigt__p_crpropa__ParticleCollector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ParticleFilter[] = {{&_swigt__p_crpropa__ParticleFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ParticleSplitting[] = {{&_swigt__p_crpropa__ParticleSplitting, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PerformanceModule[] = {{&_swigt__p_crpropa__PerformanceModule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PeriodicBox[] = {{&_swigt__p_crpropa__PeriodicBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PhotoDisintegration[] = {{&_swigt__p_crpropa__PhotoDisintegration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PhotoPionProduction[] = {{&_swigt__p_crpropa__PhotoPionProduction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PhotonOutput1D[] = {{&_swigt__p_crpropa__PhotonOutput1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PropagationBP[] = {{&_swigt__p_crpropa__PropagationBP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PropagationCK[] = {{&_swigt__p_crpropa__PropagationCK, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Redshift[] = {{&_swigt__p_crpropa__Redshift, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ReflectiveBox[] = {{&_swigt__p_crpropa__ReflectiveBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__RestrictToRegion[] = {{&_swigt__p_crpropa__RestrictToRegion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SecondOrderFermi[] = {{&_swigt__p_crpropa__SecondOrderFermi, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ShellOutput[] = {{&_swigt__p_crpropa__ShellOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ShellOutput1D[] = {{&_swigt__p_crpropa__ShellOutput1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ShellPropertyOutput[] = {{&_swigt__p_crpropa__ShellPropertyOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SimplePropagation[] = {{&_swigt__p_crpropa__SimplePropagation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SphericalBoundary[] = {{&_swigt__p_crpropa__SphericalBoundary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SynchrotronRadiation[] = {{&_swigt__p_crpropa__SynchrotronRadiation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__TextOutput[] = {{&_swigt__p_crpropa__TextOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Module[] = {  {&_swigt__p_crpropa__Module, 0, 0, 0},  {&_swigt__p_Decays, _p_DecaysTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__AbstractAccelerationModule, _p_crpropa__AbstractAccelerationModuleTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__AbstractCondition, _p_crpropa__AbstractConditionTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__AdiabaticCooling, _p_crpropa__AdiabaticCoolingTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__CandidateSplitting, _p_crpropa__CandidateSplittingTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ConstantMomentumDiffusion, _p_crpropa__ConstantMomentumDiffusionTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__CubicBoundary, _p_crpropa__CubicBoundaryTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__CylindricalBoundary, _p_crpropa__CylindricalBoundaryTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__DetectionLength, _p_crpropa__DetectionLengthTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__DiffusionSDE, _p_crpropa__DiffusionSDETo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__DirectedFlowScattering, _p_crpropa__DirectedFlowScatteringTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__EMDoublePairProduction, _p_crpropa__EMDoublePairProductionTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__EMInverseComptonScattering, _p_crpropa__EMInverseComptonScatteringTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__EMPairProduction, _p_crpropa__EMPairProductionTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__EMTripletPairProduction, _p_crpropa__EMTripletPairProductionTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ElasticScattering, _p_crpropa__ElasticScatteringTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ElectronPairProduction, _p_crpropa__ElectronPairProductionTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__EllipsoidalBoundary, _p_crpropa__EllipsoidalBoundaryTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__EmissionMapFiller, _p_crpropa__EmissionMapFillerTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__FutureRedshift, _p_crpropa__FutureRedshiftTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__MaximumTrajectoryLength, _p_crpropa__MaximumTrajectoryLengthTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__MinimumChargeNumber, _p_crpropa__MinimumChargeNumberTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__MinimumEnergy, _p_crpropa__MinimumEnergyTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__MinimumEnergyPerParticleId, _p_crpropa__MinimumEnergyPerParticleIdTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__MinimumRedshift, _p_crpropa__MinimumRedshiftTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__MinimumRigidity, _p_crpropa__MinimumRigidityTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ModuleList, _p_crpropa__ModuleListTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ModuleListRunner, _p_crpropa__ModuleListRunnerTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__NuclearDecay, _p_crpropa__NuclearDecayTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__Observer, _p_crpropa__ObserverTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__Output, _p_crpropa__OutputTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ParticleCollector, _p_crpropa__ParticleCollectorTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ParticleFilter, _p_crpropa__ParticleFilterTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ParticleSplitting, _p_crpropa__ParticleSplittingTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__PerformanceModule, _p_crpropa__PerformanceModuleTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__PeriodicBox, _p_crpropa__PeriodicBoxTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__PhotoDisintegration, _p_crpropa__PhotoDisintegrationTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__PhotoPionProduction, _p_crpropa__PhotoPionProductionTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__PhotonOutput1D, _p_crpropa__PhotonOutput1DTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__PropagationBP, _p_crpropa__PropagationBPTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__PropagationCK, _p_crpropa__PropagationCKTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__Redshift, _p_crpropa__RedshiftTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ReflectiveBox, _p_crpropa__ReflectiveBoxTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__RestrictToRegion, _p_crpropa__RestrictToRegionTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__SecondOrderFermi, _p_crpropa__SecondOrderFermiTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ShellOutput, _p_crpropa__ShellOutputTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ShellOutput1D, _p_crpropa__ShellOutput1DTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__ShellPropertyOutput, _p_crpropa__ShellPropertyOutputTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__SimplePropagation, _p_crpropa__SimplePropagationTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__SphericalBoundary, _p_crpropa__SphericalBoundaryTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__SynchrotronRadiation, _p_crpropa__SynchrotronRadiationTo_p_crpropa__Module, 0, 0},  {&_swigt__p_crpropa__TextOutput, _p_crpropa__TextOutputTo_p_crpropa__Module, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__AdvectionField[] = {{&_swigt__p_crpropa__AdvectionField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__AdvectionFieldList[] = {{&_swigt__p_crpropa__AdvectionFieldList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ArchimedeanSpiralField[] = {{&_swigt__p_crpropa__ArchimedeanSpiralField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__BlackbodyPhotonField[] = {{&_swigt__p_crpropa__BlackbodyPhotonField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__CMB[] = {{&_swigt__p_crpropa__CMB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__CMZField[] = {{&_swigt__p_crpropa__CMZField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ConstantDensity[] = {{&_swigt__p_crpropa__ConstantDensity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ConstantSphericalAdvectionField[] = {{&_swigt__p_crpropa__ConstantSphericalAdvectionField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Cordes[] = {{&_swigt__p_crpropa__Cordes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__CylindricalProjectionMap[] = {{&_swigt__p_crpropa__CylindricalProjectionMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Density[] = {{&_swigt__p_crpropa__Density, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__DensityGrid[] = {{&_swigt__p_crpropa__DensityGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__DensityList[] = {{&_swigt__p_crpropa__DensityList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__DirectedFlowOfScatterCenters[] = {{&_swigt__p_crpropa__DirectedFlowOfScatterCenters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__EmissionMap[] = {{&_swigt__p_crpropa__EmissionMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Ferriere[] = {{&_swigt__p_crpropa__Ferriere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__GridProperties[] = {{&_swigt__p_crpropa__GridProperties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Dominguez11[] = {{&_swigt__p_crpropa__IRB_Dominguez11, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Finke10[] = {{&_swigt__p_crpropa__IRB_Finke10, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Franceschini08[] = {{&_swigt__p_crpropa__IRB_Franceschini08, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Gilmore12[] = {{&_swigt__p_crpropa__IRB_Gilmore12, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Kneiske04[] = {{&_swigt__p_crpropa__IRB_Kneiske04, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Saldana21[] = {{&_swigt__p_crpropa__IRB_Saldana21, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Saldana21_lower[] = {{&_swigt__p_crpropa__IRB_Saldana21_lower, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Saldana21_upper[] = {{&_swigt__p_crpropa__IRB_Saldana21_upper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Stecker05[] = {{&_swigt__p_crpropa__IRB_Stecker05, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Stecker16_lower[] = {{&_swigt__p_crpropa__IRB_Stecker16_lower, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__IRB_Stecker16_upper[] = {{&_swigt__p_crpropa__IRB_Stecker16_upper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__JF12Field[] = {{&_swigt__p_crpropa__JF12Field, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__JF12FieldSolenoidal[] = {{&_swigt__p_crpropa__JF12FieldSolenoidal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__LogarithmicSpiralField[] = {{&_swigt__p_crpropa__LogarithmicSpiralField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MagneticDipoleField[] = {{&_swigt__p_crpropa__MagneticDipoleField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MagneticField[] = {{&_swigt__p_crpropa__MagneticField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MagneticFieldEvolution[] = {{&_swigt__p_crpropa__MagneticFieldEvolution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MagneticFieldGrid[] = {{&_swigt__p_crpropa__MagneticFieldGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__MagneticFieldList[] = {{&_swigt__p_crpropa__MagneticFieldList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ModulatedMagneticFieldGrid[] = {{&_swigt__p_crpropa__ModulatedMagneticFieldGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Nakanishi[] = {{&_swigt__p_crpropa__Nakanishi, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObliqueAdvectionShock[] = {{&_swigt__p_crpropa__ObliqueAdvectionShock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Observer1D[] = {{&_swigt__p_crpropa__Observer1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverDetectAll[] = {{&_swigt__p_crpropa__ObserverDetectAll, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverElectronVeto[] = {{&_swigt__p_crpropa__ObserverElectronVeto, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverFeature[] = {{&_swigt__p_crpropa__ObserverFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverInactiveVeto[] = {{&_swigt__p_crpropa__ObserverInactiveVeto, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverNeutrinoVeto[] = {{&_swigt__p_crpropa__ObserverNeutrinoVeto, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverNucleusVeto[] = {{&_swigt__p_crpropa__ObserverNucleusVeto, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverParticleIdVeto[] = {{&_swigt__p_crpropa__ObserverParticleIdVeto, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverPhotonVeto[] = {{&_swigt__p_crpropa__ObserverPhotonVeto, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverRedshiftWindow[] = {{&_swigt__p_crpropa__ObserverRedshiftWindow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverSurface[] = {{&_swigt__p_crpropa__ObserverSurface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverTimeEvolution[] = {{&_swigt__p_crpropa__ObserverTimeEvolution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ObserverTracking[] = {{&_swigt__p_crpropa__ObserverTracking, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__OneDimensionalCartesianShock[] = {{&_swigt__p_crpropa__OneDimensionalCartesianShock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__OneDimensionalSphericalShock[] = {{&_swigt__p_crpropa__OneDimensionalSphericalShock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PT11Field[] = {{&_swigt__p_crpropa__PT11Field, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ParaxialBox[] = {{&_swigt__p_crpropa__ParaxialBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PeriodicMagneticField[] = {{&_swigt__p_crpropa__PeriodicMagneticField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PhotonField[] = {{&_swigt__p_crpropa__PhotonField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PlanckJF12bField[] = {{&_swigt__p_crpropa__PlanckJF12bField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Plane[] = {{&_swigt__p_crpropa__Plane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PlaneWaveTurbulence[] = {{&_swigt__p_crpropa__PlaneWaveTurbulence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__PolarizedSingleModeMagneticField[] = {{&_swigt__p_crpropa__PolarizedSingleModeMagneticField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__QuasiLinearTheory[] = {{&_swigt__p_crpropa__QuasiLinearTheory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Source[] = {{&_swigt__p_crpropa__Source, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceComposition[] = {{&_swigt__p_crpropa__SourceComposition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceDensityGrid[] = {{&_swigt__p_crpropa__SourceDensityGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceDensityGrid1D[] = {{&_swigt__p_crpropa__SourceDensityGrid1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceDirectedEmission[] = {{&_swigt__p_crpropa__SourceDirectedEmission, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceDirection[] = {{&_swigt__p_crpropa__SourceDirection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceEmissionCone[] = {{&_swigt__p_crpropa__SourceEmissionCone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceEmissionMap[] = {{&_swigt__p_crpropa__SourceEmissionMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceEnergy[] = {{&_swigt__p_crpropa__SourceEnergy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceFeature[] = {{&_swigt__p_crpropa__SourceFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceInterface[] = {{&_swigt__p_crpropa__SourceInterface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceIsotropicEmission[] = {{&_swigt__p_crpropa__SourceIsotropicEmission, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceLambertDistributionOnSphere[] = {{&_swigt__p_crpropa__SourceLambertDistributionOnSphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceList[] = {{&_swigt__p_crpropa__SourceList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceMassDistribution[] = {{&_swigt__p_crpropa__SourceMassDistribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceMultipleParticleTypes[] = {{&_swigt__p_crpropa__SourceMultipleParticleTypes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceMultiplePositions[] = {{&_swigt__p_crpropa__SourceMultiplePositions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceParticleType[] = {{&_swigt__p_crpropa__SourceParticleType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourcePosition[] = {{&_swigt__p_crpropa__SourcePosition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourcePowerLawSpectrum[] = {{&_swigt__p_crpropa__SourcePowerLawSpectrum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourcePulsarDistribution[] = {{&_swigt__p_crpropa__SourcePulsarDistribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceRedshift[] = {{&_swigt__p_crpropa__SourceRedshift, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceRedshift1D[] = {{&_swigt__p_crpropa__SourceRedshift1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceRedshiftEvolution[] = {{&_swigt__p_crpropa__SourceRedshiftEvolution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceSNRDistribution[] = {{&_swigt__p_crpropa__SourceSNRDistribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceTag[] = {{&_swigt__p_crpropa__SourceTag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceUniform1D[] = {{&_swigt__p_crpropa__SourceUniform1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceUniformBox[] = {{&_swigt__p_crpropa__SourceUniformBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceUniformCylinder[] = {{&_swigt__p_crpropa__SourceUniformCylinder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceUniformHollowSphere[] = {{&_swigt__p_crpropa__SourceUniformHollowSphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceUniformRedshift[] = {{&_swigt__p_crpropa__SourceUniformRedshift, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceUniformShell[] = {{&_swigt__p_crpropa__SourceUniformShell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SourceUniformSphere[] = {{&_swigt__p_crpropa__SourceUniformSphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Sphere[] = {{&_swigt__p_crpropa__Sphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SphericalAdvectionField[] = {{&_swigt__p_crpropa__SphericalAdvectionField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__SphericalAdvectionShock[] = {{&_swigt__p_crpropa__SphericalAdvectionShock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__StepLengthModifier[] = {{&_swigt__p_crpropa__StepLengthModifier, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Surface[] = {{&_swigt__p_crpropa__Surface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__TF17Field[] = {{&_swigt__p_crpropa__TF17Field, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__TabularPhotonField[] = {{&_swigt__p_crpropa__TabularPhotonField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__ToroidalHaloField[] = {{&_swigt__p_crpropa__ToroidalHaloField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__TurbulenceSpectrum[] = {{&_swigt__p_crpropa__TurbulenceSpectrum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__TurbulentField[] = {{&_swigt__p_crpropa__TurbulentField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__URB_Fixsen11[] = {{&_swigt__p_crpropa__URB_Fixsen11, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__URB_Nitu21[] = {{&_swigt__p_crpropa__URB_Nitu21, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__URB_Protheroe96[] = {{&_swigt__p_crpropa__URB_Protheroe96, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__UniformAdvectionField[] = {{&_swigt__p_crpropa__UniformAdvectionField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__UniformMagneticField[] = {{&_swigt__p_crpropa__UniformMagneticField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Referenced[] = {  {&_swigt__p_crpropa__Referenced, 0, 0, 0},  {&_swigt__p_Decays, _p_DecaysTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__AbstractAccelerationModule, _p_crpropa__AbstractAccelerationModuleTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__AbstractCondition, _p_crpropa__AbstractConditionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__AdiabaticCooling, _p_crpropa__AdiabaticCoolingTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__AdvectionField, _p_crpropa__AdvectionFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__AdvectionFieldList, _p_crpropa__AdvectionFieldListTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ArchimedeanSpiralField, _p_crpropa__ArchimedeanSpiralFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__BlackbodyPhotonField, _p_crpropa__BlackbodyPhotonFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__CMB, _p_crpropa__CMBTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__CMZField, _p_crpropa__CMZFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Candidate, _p_crpropa__CandidateTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__CandidateSplitting, _p_crpropa__CandidateSplittingTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ConstantDensity, _p_crpropa__ConstantDensityTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ConstantMomentumDiffusion, _p_crpropa__ConstantMomentumDiffusionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ConstantSphericalAdvectionField, _p_crpropa__ConstantSphericalAdvectionFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Cordes, _p_crpropa__CordesTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__CubicBoundary, _p_crpropa__CubicBoundaryTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__CylindricalBoundary, _p_crpropa__CylindricalBoundaryTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__CylindricalProjectionMap, _p_crpropa__CylindricalProjectionMapTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Density, _p_crpropa__DensityTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__DensityGrid, _p_crpropa__DensityGridTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__DensityList, _p_crpropa__DensityListTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__DetectionLength, _p_crpropa__DetectionLengthTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__DiffusionSDE, _p_crpropa__DiffusionSDETo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__DirectedFlowOfScatterCenters, _p_crpropa__DirectedFlowOfScatterCentersTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__DirectedFlowScattering, _p_crpropa__DirectedFlowScatteringTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__EMDoublePairProduction, _p_crpropa__EMDoublePairProductionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__EMInverseComptonScattering, _p_crpropa__EMInverseComptonScatteringTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__EMPairProduction, _p_crpropa__EMPairProductionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__EMTripletPairProduction, _p_crpropa__EMTripletPairProductionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ElasticScattering, _p_crpropa__ElasticScatteringTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ElectronPairProduction, _p_crpropa__ElectronPairProductionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__EllipsoidalBoundary, _p_crpropa__EllipsoidalBoundaryTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__EmissionMap, _p_crpropa__EmissionMapTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__EmissionMapFiller, _p_crpropa__EmissionMapFillerTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Ferriere, _p_crpropa__FerriereTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__FutureRedshift, _p_crpropa__FutureRedshiftTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__GridProperties, _p_crpropa__GridPropertiesTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__GridT_crpropa__Vector3T_double_t_t, _p_crpropa__GridT_crpropa__Vector3T_double_t_tTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__GridT_crpropa__Vector3T_float_t_t, _p_crpropa__GridT_crpropa__Vector3T_float_t_tTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__GridT_double_t, _p_crpropa__GridT_double_tTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__GridT_float_t, _p_crpropa__GridT_float_tTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Dominguez11, _p_crpropa__IRB_Dominguez11To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Finke10, _p_crpropa__IRB_Finke10To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Franceschini08, _p_crpropa__IRB_Franceschini08To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Gilmore12, _p_crpropa__IRB_Gilmore12To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Kneiske04, _p_crpropa__IRB_Kneiske04To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Saldana21, _p_crpropa__IRB_Saldana21To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Saldana21_lower, _p_crpropa__IRB_Saldana21_lowerTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Saldana21_upper, _p_crpropa__IRB_Saldana21_upperTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Stecker05, _p_crpropa__IRB_Stecker05To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Stecker16_lower, _p_crpropa__IRB_Stecker16_lowerTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__IRB_Stecker16_upper, _p_crpropa__IRB_Stecker16_upperTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__JF12Field, _p_crpropa__JF12FieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__JF12FieldSolenoidal, _p_crpropa__JF12FieldSolenoidalTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__LogarithmicSpiralField, _p_crpropa__LogarithmicSpiralFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MagneticDipoleField, _p_crpropa__MagneticDipoleFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MagneticField, _p_crpropa__MagneticFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MagneticFieldEvolution, _p_crpropa__MagneticFieldEvolutionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MagneticFieldGrid, _p_crpropa__MagneticFieldGridTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MagneticFieldList, _p_crpropa__MagneticFieldListTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MaximumTrajectoryLength, _p_crpropa__MaximumTrajectoryLengthTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MinimumChargeNumber, _p_crpropa__MinimumChargeNumberTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MinimumEnergy, _p_crpropa__MinimumEnergyTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MinimumEnergyPerParticleId, _p_crpropa__MinimumEnergyPerParticleIdTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MinimumRedshift, _p_crpropa__MinimumRedshiftTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__MinimumRigidity, _p_crpropa__MinimumRigidityTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ModulatedMagneticFieldGrid, _p_crpropa__ModulatedMagneticFieldGridTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Module, _p_crpropa__ModuleTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ModuleList, _p_crpropa__ModuleListTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ModuleListRunner, _p_crpropa__ModuleListRunnerTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Nakanishi, _p_crpropa__NakanishiTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__NuclearDecay, _p_crpropa__NuclearDecayTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObliqueAdvectionShock, _p_crpropa__ObliqueAdvectionShockTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Observer, _p_crpropa__ObserverTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Observer1D, _p_crpropa__Observer1DTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverDetectAll, _p_crpropa__ObserverDetectAllTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverElectronVeto, _p_crpropa__ObserverElectronVetoTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverFeature, _p_crpropa__ObserverFeatureTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverInactiveVeto, _p_crpropa__ObserverInactiveVetoTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverNeutrinoVeto, _p_crpropa__ObserverNeutrinoVetoTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverNucleusVeto, _p_crpropa__ObserverNucleusVetoTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverParticleIdVeto, _p_crpropa__ObserverParticleIdVetoTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverPhotonVeto, _p_crpropa__ObserverPhotonVetoTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverRedshiftWindow, _p_crpropa__ObserverRedshiftWindowTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverSurface, _p_crpropa__ObserverSurfaceTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverTimeEvolution, _p_crpropa__ObserverTimeEvolutionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ObserverTracking, _p_crpropa__ObserverTrackingTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__OneDimensionalCartesianShock, _p_crpropa__OneDimensionalCartesianShockTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__OneDimensionalSphericalShock, _p_crpropa__OneDimensionalSphericalShockTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Output, _p_crpropa__OutputTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PT11Field, _p_crpropa__PT11FieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ParaxialBox, _p_crpropa__ParaxialBoxTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ParticleCollector, _p_crpropa__ParticleCollectorTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ParticleFilter, _p_crpropa__ParticleFilterTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ParticleSplitting, _p_crpropa__ParticleSplittingTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PerformanceModule, _p_crpropa__PerformanceModuleTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PeriodicBox, _p_crpropa__PeriodicBoxTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PeriodicMagneticField, _p_crpropa__PeriodicMagneticFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PhotoDisintegration, _p_crpropa__PhotoDisintegrationTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PhotoPionProduction, _p_crpropa__PhotoPionProductionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PhotonField, _p_crpropa__PhotonFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PhotonOutput1D, _p_crpropa__PhotonOutput1DTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PlanckJF12bField, _p_crpropa__PlanckJF12bFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Plane, _p_crpropa__PlaneTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PlaneWaveTurbulence, _p_crpropa__PlaneWaveTurbulenceTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PolarizedSingleModeMagneticField, _p_crpropa__PolarizedSingleModeMagneticFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PropagationBP, _p_crpropa__PropagationBPTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__PropagationCK, _p_crpropa__PropagationCKTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__QuasiLinearTheory, _p_crpropa__QuasiLinearTheoryTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Redshift, _p_crpropa__RedshiftTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ReflectiveBox, _p_crpropa__ReflectiveBoxTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__RestrictToRegion, _p_crpropa__RestrictToRegionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SecondOrderFermi, _p_crpropa__SecondOrderFermiTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ShellOutput, _p_crpropa__ShellOutputTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ShellOutput1D, _p_crpropa__ShellOutput1DTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ShellPropertyOutput, _p_crpropa__ShellPropertyOutputTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SimplePropagation, _p_crpropa__SimplePropagationTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Source, _p_crpropa__SourceTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceComposition, _p_crpropa__SourceCompositionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceDensityGrid, _p_crpropa__SourceDensityGridTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceDensityGrid1D, _p_crpropa__SourceDensityGrid1DTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceDirectedEmission, _p_crpropa__SourceDirectedEmissionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceDirection, _p_crpropa__SourceDirectionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceEmissionCone, _p_crpropa__SourceEmissionConeTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceEmissionMap, _p_crpropa__SourceEmissionMapTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceEnergy, _p_crpropa__SourceEnergyTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceFeature, _p_crpropa__SourceFeatureTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceInterface, _p_crpropa__SourceInterfaceTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceIsotropicEmission, _p_crpropa__SourceIsotropicEmissionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceLambertDistributionOnSphere, _p_crpropa__SourceLambertDistributionOnSphereTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceList, _p_crpropa__SourceListTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceMassDistribution, _p_crpropa__SourceMassDistributionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceMultipleParticleTypes, _p_crpropa__SourceMultipleParticleTypesTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceMultiplePositions, _p_crpropa__SourceMultiplePositionsTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceParticleType, _p_crpropa__SourceParticleTypeTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourcePosition, _p_crpropa__SourcePositionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourcePowerLawSpectrum, _p_crpropa__SourcePowerLawSpectrumTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourcePulsarDistribution, _p_crpropa__SourcePulsarDistributionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceRedshift, _p_crpropa__SourceRedshiftTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceRedshift1D, _p_crpropa__SourceRedshift1DTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceRedshiftEvolution, _p_crpropa__SourceRedshiftEvolutionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceSNRDistribution, _p_crpropa__SourceSNRDistributionTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceTag, _p_crpropa__SourceTagTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceUniform1D, _p_crpropa__SourceUniform1DTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceUniformBox, _p_crpropa__SourceUniformBoxTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceUniformCylinder, _p_crpropa__SourceUniformCylinderTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceUniformHollowSphere, _p_crpropa__SourceUniformHollowSphereTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceUniformRedshift, _p_crpropa__SourceUniformRedshiftTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceUniformShell, _p_crpropa__SourceUniformShellTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SourceUniformSphere, _p_crpropa__SourceUniformSphereTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Sphere, _p_crpropa__SphereTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SphericalAdvectionField, _p_crpropa__SphericalAdvectionFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SphericalAdvectionShock, _p_crpropa__SphericalAdvectionShockTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SphericalBoundary, _p_crpropa__SphericalBoundaryTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__StepLengthModifier, _p_crpropa__StepLengthModifierTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__Surface, _p_crpropa__SurfaceTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__SynchrotronRadiation, _p_crpropa__SynchrotronRadiationTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__TF17Field, _p_crpropa__TF17FieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__TabularPhotonField, _p_crpropa__TabularPhotonFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__TextOutput, _p_crpropa__TextOutputTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__ToroidalHaloField, _p_crpropa__ToroidalHaloFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__TurbulenceSpectrum, _p_crpropa__TurbulenceSpectrumTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__TurbulentField, _p_crpropa__TurbulentFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__URB_Fixsen11, _p_crpropa__URB_Fixsen11To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__URB_Nitu21, _p_crpropa__URB_Nitu21To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__URB_Protheroe96, _p_crpropa__URB_Protheroe96To_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__UniformAdvectionField, _p_crpropa__UniformAdvectionFieldTo_p_crpropa__Referenced, 0, 0},  {&_swigt__p_crpropa__UniformMagneticField, _p_crpropa__UniformMagneticFieldTo_p_crpropa__Referenced, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Vector3T_double_t[] = {  {&_swigt__p_crpropa__Vector3T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_crpropa__Vector3T_float_t[] = {  {&_swigt__p_crpropa__Vector3T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_element_type[] = {  {&_swigt__p_element_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fmtflags[] = {  {&_swigt__p_fmtflags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int_type[] = {  {&_swigt__p_int_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iostate[] = {  {&_swigt__p_iostate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_t[] = {  {&_swigt__p_key_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_map_t[] = {  {&_swigt__p_map_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_module_list_t[] = {  {&_swigt__p_module_list_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_off_type[] = {  {&_swigt__p_off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openmode[] = {  {&_swigt__p_openmode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pos_type[] = {  {&_swigt__p_pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_seekdir[] = {  {&_swigt__p_seekdir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_state_type[] = {  {&_swigt__p_state_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_traits_type[] = {  {&_swigt__p_traits_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vector_const_iterator[] = {  {&_swigt__p_vector_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vector_iterator[] = {  {&_swigt__p_vector_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vector_t[] = {  {&_swigt__p_vector_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Decays,
  _swigc__p_PropertyMap,
  _swigc__p_SwigPyObject,
  _swigc__p_Vector3c,
  _swigc__p_allocator_type,
  _swigc__p_candidate_vector_t,
  _swigc__p_char,
  _swigc__p_char_type,
  _swigc__p_complex_d,
  _swigc__p_complex_f,
  _swigc__p_const_iterator,
  _swigc__p_crpropa__AbstractAccelerationModule,
  _swigc__p_crpropa__AbstractCondition,
  _swigc__p_crpropa__AdiabaticCooling,
  _swigc__p_crpropa__AdvectionField,
  _swigc__p_crpropa__AdvectionFieldList,
  _swigc__p_crpropa__ArchimedeanSpiralField,
  _swigc__p_crpropa__BlackbodyPhotonField,
  _swigc__p_crpropa__CMB,
  _swigc__p_crpropa__CMZField,
  _swigc__p_crpropa__Candidate,
  _swigc__p_crpropa__CandidateSplitting,
  _swigc__p_crpropa__ConstantDensity,
  _swigc__p_crpropa__ConstantMomentumDiffusion,
  _swigc__p_crpropa__ConstantSphericalAdvectionField,
  _swigc__p_crpropa__Cordes,
  _swigc__p_crpropa__CubicBoundary,
  _swigc__p_crpropa__CylindricalBoundary,
  _swigc__p_crpropa__CylindricalProjectionMap,
  _swigc__p_crpropa__Density,
  _swigc__p_crpropa__DensityGrid,
  _swigc__p_crpropa__DensityList,
  _swigc__p_crpropa__DetectionLength,
  _swigc__p_crpropa__DiffusionSDE,
  _swigc__p_crpropa__DirectedFlowOfScatterCenters,
  _swigc__p_crpropa__DirectedFlowScattering,
  _swigc__p_crpropa__EMDoublePairProduction,
  _swigc__p_crpropa__EMInverseComptonScattering,
  _swigc__p_crpropa__EMPairProduction,
  _swigc__p_crpropa__EMTripletPairProduction,
  _swigc__p_crpropa__ElasticScattering,
  _swigc__p_crpropa__ElectronPairProduction,
  _swigc__p_crpropa__EllipsoidalBoundary,
  _swigc__p_crpropa__EmissionMap,
  _swigc__p_crpropa__EmissionMapFiller,
  _swigc__p_crpropa__Ferriere,
  _swigc__p_crpropa__FutureRedshift,
  _swigc__p_crpropa__GridProperties,
  _swigc__p_crpropa__GridT_crpropa__Vector3T_double_t_t,
  _swigc__p_crpropa__GridT_crpropa__Vector3T_float_t_t,
  _swigc__p_crpropa__GridT_double_t,
  _swigc__p_crpropa__GridT_float_t,
  _swigc__p_crpropa__IRB_Dominguez11,
  _swigc__p_crpropa__IRB_Finke10,
  _swigc__p_crpropa__IRB_Franceschini08,
  _swigc__p_crpropa__IRB_Gilmore12,
  _swigc__p_crpropa__IRB_Kneiske04,
  _swigc__p_crpropa__IRB_Saldana21,
  _swigc__p_crpropa__IRB_Saldana21_lower,
  _swigc__p_crpropa__IRB_Saldana21_upper,
  _swigc__p_crpropa__IRB_Stecker05,
  _swigc__p_crpropa__IRB_Stecker16_lower,
  _swigc__p_crpropa__IRB_Stecker16_upper,
  _swigc__p_crpropa__JF12Field,
  _swigc__p_crpropa__JF12FieldSolenoidal,
  _swigc__p_crpropa__LogarithmicSpiralField,
  _swigc__p_crpropa__MagneticDipoleField,
  _swigc__p_crpropa__MagneticField,
  _swigc__p_crpropa__MagneticFieldEvolution,
  _swigc__p_crpropa__MagneticFieldGrid,
  _swigc__p_crpropa__MagneticFieldList,
  _swigc__p_crpropa__MaximumTrajectoryLength,
  _swigc__p_crpropa__MinimumChargeNumber,
  _swigc__p_crpropa__MinimumEnergy,
  _swigc__p_crpropa__MinimumEnergyPerParticleId,
  _swigc__p_crpropa__MinimumRedshift,
  _swigc__p_crpropa__MinimumRigidity,
  _swigc__p_crpropa__ModulatedMagneticFieldGrid,
  _swigc__p_crpropa__Module,
  _swigc__p_crpropa__ModuleList,
  _swigc__p_crpropa__ModuleListRunner,
  _swigc__p_crpropa__Nakanishi,
  _swigc__p_crpropa__NuclearDecay,
  _swigc__p_crpropa__ObliqueAdvectionShock,
  _swigc__p_crpropa__Observer,
  _swigc__p_crpropa__Observer1D,
  _swigc__p_crpropa__ObserverDetectAll,
  _swigc__p_crpropa__ObserverElectronVeto,
  _swigc__p_crpropa__ObserverFeature,
  _swigc__p_crpropa__ObserverInactiveVeto,
  _swigc__p_crpropa__ObserverNeutrinoVeto,
  _swigc__p_crpropa__ObserverNucleusVeto,
  _swigc__p_crpropa__ObserverParticleIdVeto,
  _swigc__p_crpropa__ObserverPhotonVeto,
  _swigc__p_crpropa__ObserverRedshiftWindow,
  _swigc__p_crpropa__ObserverSurface,
  _swigc__p_crpropa__ObserverTimeEvolution,
  _swigc__p_crpropa__ObserverTracking,
  _swigc__p_crpropa__OneDimensionalCartesianShock,
  _swigc__p_crpropa__OneDimensionalSphericalShock,
  _swigc__p_crpropa__Output,
  _swigc__p_crpropa__PT11Field,
  _swigc__p_crpropa__ParaxialBox,
  _swigc__p_crpropa__ParticleCollector,
  _swigc__p_crpropa__ParticleFilter,
  _swigc__p_crpropa__ParticleSplitting,
  _swigc__p_crpropa__PerformanceModule,
  _swigc__p_crpropa__PeriodicBox,
  _swigc__p_crpropa__PeriodicMagneticField,
  _swigc__p_crpropa__PhotoDisintegration,
  _swigc__p_crpropa__PhotoPionProduction,
  _swigc__p_crpropa__PhotonField,
  _swigc__p_crpropa__PhotonOutput1D,
  _swigc__p_crpropa__PlanckJF12bField,
  _swigc__p_crpropa__Plane,
  _swigc__p_crpropa__PlaneWaveTurbulence,
  _swigc__p_crpropa__PolarizedSingleModeMagneticField,
  _swigc__p_crpropa__PropagationBP,
  _swigc__p_crpropa__PropagationCK,
  _swigc__p_crpropa__QuasiLinearTheory,
  _swigc__p_crpropa__Redshift,
  _swigc__p_crpropa__Referenced,
  _swigc__p_crpropa__ReflectiveBox,
  _swigc__p_crpropa__RestrictToRegion,
  _swigc__p_crpropa__SecondOrderFermi,
  _swigc__p_crpropa__ShellOutput,
  _swigc__p_crpropa__ShellOutput1D,
  _swigc__p_crpropa__ShellPropertyOutput,
  _swigc__p_crpropa__SimplePropagation,
  _swigc__p_crpropa__Source,
  _swigc__p_crpropa__SourceComposition,
  _swigc__p_crpropa__SourceDensityGrid,
  _swigc__p_crpropa__SourceDensityGrid1D,
  _swigc__p_crpropa__SourceDirectedEmission,
  _swigc__p_crpropa__SourceDirection,
  _swigc__p_crpropa__SourceEmissionCone,
  _swigc__p_crpropa__SourceEmissionMap,
  _swigc__p_crpropa__SourceEnergy,
  _swigc__p_crpropa__SourceFeature,
  _swigc__p_crpropa__SourceInterface,
  _swigc__p_crpropa__SourceIsotropicEmission,
  _swigc__p_crpropa__SourceLambertDistributionOnSphere,
  _swigc__p_crpropa__SourceList,
  _swigc__p_crpropa__SourceMassDistribution,
  _swigc__p_crpropa__SourceMultipleParticleTypes,
  _swigc__p_crpropa__SourceMultiplePositions,
  _swigc__p_crpropa__SourceParticleType,
  _swigc__p_crpropa__SourcePosition,
  _swigc__p_crpropa__SourcePowerLawSpectrum,
  _swigc__p_crpropa__SourcePulsarDistribution,
  _swigc__p_crpropa__SourceRedshift,
  _swigc__p_crpropa__SourceRedshift1D,
  _swigc__p_crpropa__SourceRedshiftEvolution,
  _swigc__p_crpropa__SourceSNRDistribution,
  _swigc__p_crpropa__SourceTag,
  _swigc__p_crpropa__SourceUniform1D,
  _swigc__p_crpropa__SourceUniformBox,
  _swigc__p_crpropa__SourceUniformCylinder,
  _swigc__p_crpropa__SourceUniformHollowSphere,
  _swigc__p_crpropa__SourceUniformRedshift,
  _swigc__p_crpropa__SourceUniformShell,
  _swigc__p_crpropa__SourceUniformSphere,
  _swigc__p_crpropa__Sphere,
  _swigc__p_crpropa__SphericalAdvectionField,
  _swigc__p_crpropa__SphericalAdvectionShock,
  _swigc__p_crpropa__SphericalBoundary,
  _swigc__p_crpropa__StepLengthModifier,
  _swigc__p_crpropa__Surface,
  _swigc__p_crpropa__SynchrotronRadiation,
  _swigc__p_crpropa__TF17Field,
  _swigc__p_crpropa__TabularPhotonField,
  _swigc__p_crpropa__TextOutput,
  _swigc__p_crpropa__ToroidalHaloField,
  _swigc__p_crpropa__TurbulenceSpectrum,
  _swigc__p_crpropa__TurbulentField,
  _swigc__p_crpropa__URB_Fixsen11,
  _swigc__p_crpropa__URB_Nitu21,
  _swigc__p_crpropa__URB_Protheroe96,
  _swigc__p_crpropa__UniformAdvectionField,
  _swigc__p_crpropa__UniformMagneticField,
  _swigc__p_crpropa__Vector3T_double_t,
  _swigc__p_crpropa__Vector3T_float_t,
  _swigc__p_difference_type,
  _swigc__p_element_type,
  _swigc__p_first_type,
  _swigc__p_fmtflags,
  _swigc__p_int,
  _swigc__p_int_type,
  _swigc__p_iostate,
  _swigc__p_iterator,
  _swigc__p_key_t,
  _swigc__p_key_type,
  _swigc__p_long_long,
  _swigc__p_map_t,
  _swigc__p_module_list_t,
  _swigc__p_off_type,
  _swigc__p_openmode,
  _swigc__p_pos_type,
  _swigc__p_second_type,
  _swigc__p_seekdir,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_state_type,
  _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_traits_type,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_vector_const_iterator,
  _swigc__p_vector_iterator,
  _swigc__p_vector_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
static PyTypeObject *builtin_bases[3];

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------
   * Patch %callback methods' docstrings to hold the callback ptrs
   * -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        const swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif




/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  /* type '::Decays' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__Decays_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_crpropa__Module");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Decays' as base 'crpropa::Module' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Decays'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Decays", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Decays");
  d = md;
  
  /* Initialize threading */
  SWIG_PYTHON_INITIALIZE_THREADS;
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

